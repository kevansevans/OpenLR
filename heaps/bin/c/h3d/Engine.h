// Generated by HLC 4.1.5 (HL v5)
#ifndef INC_h3d__Engine
#define INC_h3d__Engine
typedef struct _h3d__$Engine *h3d__$Engine;
typedef struct _h3d__Engine *h3d__Engine;
#include <hl/Class.h>
#include <hl/BaseType.h>
#include <_std/String.h>
#include <h3d/impl/Driver.h>
#include <h3d/impl/MemoryManager.h>
#include <h3d/Vector.h>
#include <hxd/Window.h>
#include <h3d/_Engine/TargetTmp.h>
#include <h3d/mat/Texture.h>
#include <haxe/ds/IntMap.h>
#include <haxe/ds/ObjectMap.h>


struct _h3d__$Engine {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	bool SOFTWARE_DRIVER;
	int ANTIALIASING;
	h3d__Engine CURRENT;
};
struct _h3d__Engine {
	hl_type *$type;
	h3d__impl__Driver driver;
	h3d__impl__MemoryManager mem;
	bool hardware;
	int width;
	int height;
	bool debug;
	int drawTriangles;
	int drawCalls;
	int shaderSwitches;
	vdynamic* backgroundColor;
	bool autoResize;
	bool fullScreen;
	double realFps;
	double lastTime;
	int antiAlias;
	h3d__Vector tmpVector;
	hxd__Window window;
	h3d___Engine__TargetTmp targetTmp;
	h3d___Engine__TargetTmp targetStack;
	h3d__mat__Texture currentTargetTex;
	int currentTargetLayer;
	int currentTargetMip;
	bool needFlushTarget;
	h3d__mat__Texture nullTexture;
	haxe__ds__IntMap textureColorCache;
	bool inRender;
	bool ready;
	haxe__ds__ObjectMap resCache;
	vclosure* onContextLost;
	vclosure* onReady;
	vclosure* onResized;
};
#endif

