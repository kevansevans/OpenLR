// Generated by HLC 4.1.5 (HL v5)
#ifndef INC_haxe__macro__ComplexType
#define INC_haxe__macro__ComplexType
typedef struct _haxe__macro__$ComplexType *haxe__macro__$ComplexType;
#include <hl/Enum.h>
#include <hl/BaseType.h>
#include <_std/String.h>
#include <hl/natives.h>
#include <hl/types/ArrayObj.h>
#include <haxe/macro/ComplexType.h>


struct _haxe__macro__$ComplexType {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	vvirtual* p0;
} haxe_macro_ComplexType_TPath;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
	venum* p1;
} haxe_macro_ComplexType_TFunction;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
} haxe_macro_ComplexType_TAnonymous;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
} haxe_macro_ComplexType_TParent;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
	hl__types__ArrayObj p1;
} haxe_macro_ComplexType_TExtend;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
} haxe_macro_ComplexType_TOptional;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
	venum* p1;
} haxe_macro_ComplexType_TNamed;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
} haxe_macro_ComplexType_TIntersection;
#endif

