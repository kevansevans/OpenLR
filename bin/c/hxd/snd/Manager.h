// Generated by HLC 4.1.4 (HL v5)
#ifndef INC_hxd__snd__Manager
#define INC_hxd__snd__Manager
typedef struct _hxd__snd__$Manager *hxd__snd__$Manager;
typedef struct _hxd__snd__Manager *hxd__snd__Manager;
#include <hxd/snd/Data.h>
#include <hxd/snd/Buffer.h>
#include <hxd/snd/Manager.h>
#include <hl/Class.h>
#include <hl/BaseType.h>
#include <_std/String.h>
#include <hxd/snd/Effect.h>
#include <hxd/snd/SoundGroup.h>
#include <hxd/snd/ChannelGroup.h>
#include <hxd/snd/Listener.h>
#include <haxe/MainEvent.h>
#include <haxe/io/Bytes.h>
#include <hxd/snd/openal/SourceHandle.h>
#include <hxd/snd/openal/BufferHandle.h>
#include <h3d/Vector.h>
#include <hxd/snd/SampleFormat.h>
#include <hxd/snd/DriverFeature.h>
#include <hxd/snd/EffectDriver.h>
#include <hxd/snd/Channel.h>
#include <hl/types/ArrayObj.h>
#include <haxe/ds/StringMap.h>


typedef struct {
	HL__ENUM_CONSTRUCT__
	hxd__snd__Data p0;
	bool p1;
	hxd__snd__Buffer p2;
	hxd__snd__Manager p3;
} Enumt$ctx_3e149af;
struct _hxd__snd__$Manager {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	double STREAM_DURATION;
	int STREAM_BUFFER_SAMPLE_COUNT;
	int BUFFER_QUEUE_LENGTH;
	int MAX_SOURCES;
	int SOUND_BUFFER_CACHE_SIZE;
	double VIRTUAL_VOLUME_THRESHOLD;
	int BUFFER_STREAM_SPLIT;
	hxd__snd__Manager instance;
	vclosure* get;
	vclosure* regEffect;
};
struct _hxd__snd__Manager {
	hl_type *$type;
	double masterVolume;
	hxd__snd__SoundGroup masterSoundGroup;
	hxd__snd__ChannelGroup masterChannelGroup;
	hxd__snd__Listener listener;
	double timeOffset;
	haxe__MainEvent updateEvent;
	haxe__io__Bytes cachedBytes;
	haxe__io__Bytes resampleBytes;
	vvirtual* driver;
	hxd__snd__Channel channels;
	hl__types__ArrayObj sources;
	double now;
	int soundBufferCount;
	haxe__ds__StringMap soundBufferMap;
	hl__types__ArrayObj soundBufferKeys;
	hl__types__ArrayObj freeStreamBuffers;
	hl__types__ArrayObj effectGC;
	bool hasMasterVolume;
	bool suspended;
	int targetRate;
	venum* targetFormat;
	int targetChannels;
};
#endif

