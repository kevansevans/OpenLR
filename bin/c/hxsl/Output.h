// Generated by HLC 4.1.4 (HL v5)
#ifndef INC_hxsl__Output
#define INC_hxsl__Output
typedef struct _hxsl__$Output *hxsl__$Output;
#include <hl/Enum.h>
#include <hl/BaseType.h>
#include <_std/String.h>
#include <hl/natives.h>
#include <hl/types/ArrayObj.h>
#include <hxsl/Output.h>


struct _hxsl__$Output {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __ename__;
	hl_bytes_map* __emap__;
	hl__types__ArrayObj __constructs__;
	varray* __evalues__;
};
typedef struct {
	HL__ENUM_CONSTRUCT__
	double p0;
} hxsl_Output_Const;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
	vdynamic* p1;
} hxsl_Output_Value;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
} hxsl_Output_PackNormal;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
} hxsl_Output_PackFloat;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
} hxsl_Output_Vec2;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
} hxsl_Output_Vec3;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
} hxsl_Output_Vec4;
typedef struct {
	HL__ENUM_CONSTRUCT__
	venum* p0;
	hl__types__ArrayObj p1;
} hxsl_Output_Swiz;
#endif

