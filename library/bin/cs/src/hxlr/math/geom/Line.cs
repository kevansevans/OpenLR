// Generated by Haxe 4.1.5

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxlr.math.geom {
	public class Line : global::haxe.lang.HxObject {
		
		public Line(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Line(global::hxlr.math.geom.Point _start, global::hxlr.math.geom.Point _end) {
			global::hxlr.math.geom.Line.__hx_ctor_hxlr_math_geom_Line(this, _start, _end);
		}
		
		
		protected static void __hx_ctor_hxlr_math_geom_Line(global::hxlr.math.geom.Line __hx_this, global::hxlr.math.geom.Point _start, global::hxlr.math.geom.Point _end) {
			__hx_this.start = _start;
			__hx_this.end = _end;
		}
		
		
		public global::hxlr.math.geom.Point start;
		
		public global::hxlr.math.geom.Point end;
		
		
		
		
		
		public virtual bool intersects(global::hxlr.math.geom.Line _line) {
			return false;
		}
		
		
		public virtual double get_length() {
			unchecked {
				return global::System.Math.Sqrt(((double) (( global::System.Math.Pow(((double) (( this.end.x - this.start.x )) ), ((double) (2) )) + global::System.Math.Pow(((double) (( this.end.y - this.start.y )) ), ((double) (2) )) )) ));
			}
		}
		
		
		public virtual double set_length(double @value) {
			this.end.x += ( @value * global::System.Math.Cos(((double) (this.get_angle()) )) );
			this.end.y += ( @value * global::System.Math.Sin(((double) (this.get_angle()) )) );
			return this.get_length();
		}
		
		
		public virtual double get_angle() {
			double dx = ( this.end.x - this.start.x );
			double dy = ( this.end.y - this.start.y );
			double theta = global::System.Math.Atan(((double) (( dy / dx )) ));
			return theta;
		}
		
		
		public virtual double set_angle(double @value) {
			return this.get_angle();
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 585253843:
					{
						this.set_angle(@value);
						return @value;
					}
					
					
					case 520590566:
					{
						this.set_length(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 585253843:
					{
						this.set_angle(((double) (global::haxe.lang.Runtime.toDouble(@value)) ));
						return @value;
					}
					
					
					case 520590566:
					{
						this.set_length(((double) (global::haxe.lang.Runtime.toDouble(@value)) ));
						return @value;
					}
					
					
					case 5047259:
					{
						this.end = ((global::hxlr.math.geom.Point) (@value) );
						return @value;
					}
					
					
					case 67859554:
					{
						this.start = ((global::hxlr.math.geom.Point) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1239190582:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_angle", 1239190582)) );
					}
					
					
					case 1720426538:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_angle", 1720426538)) );
					}
					
					
					case 319595299:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_length", 319595299)) );
					}
					
					
					case 261031087:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_length", 261031087)) );
					}
					
					
					case 1676395188:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "intersects", 1676395188)) );
					}
					
					
					case 585253843:
					{
						return this.get_angle();
					}
					
					
					case 520590566:
					{
						return this.get_length();
					}
					
					
					case 5047259:
					{
						return this.end;
					}
					
					
					case 67859554:
					{
						return this.start;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 585253843:
					{
						return this.get_angle();
					}
					
					
					case 520590566:
					{
						return this.get_length();
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1239190582:
					{
						return this.set_angle(((double) (global::haxe.lang.Runtime.toDouble(dynargs[0])) ));
					}
					
					
					case 1720426538:
					{
						return this.get_angle();
					}
					
					
					case 319595299:
					{
						return this.set_length(((double) (global::haxe.lang.Runtime.toDouble(dynargs[0])) ));
					}
					
					
					case 261031087:
					{
						return this.get_length();
					}
					
					
					case 1676395188:
					{
						return this.intersects(((global::hxlr.math.geom.Line) (dynargs[0]) ));
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			baseArr.push("angle");
			baseArr.push("length");
			baseArr.push("end");
			baseArr.push("start");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


