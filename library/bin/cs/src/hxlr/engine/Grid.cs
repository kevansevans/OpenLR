// Generated by Haxe 4.1.5

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxlr.engine {
	public class Grid : global::haxe.lang.HxObject {
		
		static Grid() {
			global::hxlr.engine.Grid.lineCount = 0;
			global::hxlr.engine.Grid.lineIDCount = 0;
			global::hxlr.engine.Grid.subTypeCount = new global::Array<object>();
		}
		
		
		public Grid(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Grid() {
			global::hxlr.engine.Grid.__hx_ctor_hxlr_engine_Grid(this);
		}
		
		
		protected static void __hx_ctor_hxlr_engine_Grid(global::hxlr.engine.Grid __hx_this) {
			global::hxlr.engine.Grid.registry = new global::haxe.ds.StringMap<object>();
			global::hxlr.engine.Grid.lines = new global::Array<object>();
		}
		
		
		public static int lineCount;
		
		public static int lineIDCount;
		
		public static global::Array<object> subTypeCount;
		
		public static global::haxe.ds.StringMap<object> registry;
		
		public static global::Array<object> lines;
		
		public static void register(global::hxlr.lines.LineObject _line) {
			unchecked {
				global::hxlr.engine.Grid.addLine(_line);
				object start = global::hxlr.engine.Cell.getInfo(_line.start.x, _line.start.y);
				object end = global::hxlr.engine.Cell.getInfo(_line.end.x, _line.end.y);
				int right = ( (( _line.dx > 0 )) ? (((int) (global::haxe.lang.Runtime.getField_f(end, "x", 120, true)) )) : (((int) (global::haxe.lang.Runtime.getField_f(start, "x", 120, true)) )) );
				int left = ( (( _line.dx > 0 )) ? (((int) (global::haxe.lang.Runtime.getField_f(start, "x", 120, true)) )) : (((int) (global::haxe.lang.Runtime.getField_f(end, "x", 120, true)) )) );
				int bottom = ( (( _line.dy > 0 )) ? (((int) (global::haxe.lang.Runtime.getField_f(end, "y", 121, true)) )) : (((int) (global::haxe.lang.Runtime.getField_f(start, "y", 121, true)) )) );
				int top = ( (( _line.dy > 0 )) ? (((int) (global::haxe.lang.Runtime.getField_f(start, "y", 121, true)) )) : (((int) (global::haxe.lang.Runtime.getField_f(end, "y", 121, true)) )) );
				global::hxlr.engine.Grid.storeLine(_line, start);
				if (( ( ( _line.dx == 0 ) && ( _line.dy == 0 ) ) || ( ( left == right ) && ( top == bottom ) ) )) {
					return;
				}
				
				double x = _line.start.x;
				double y = _line.start.y;
				double invDx = ( (( _line.dx == 0 )) ? (((double) (1) )) : (( 1 / _line.dx )) );
				double invDy = ( (( _line.dy == 0 )) ? (((double) (1) )) : (( 1 / _line.dy )) );
				double difX = default(double);
				double difY = default(double);
				while (true) {
					if (( ((int) (global::haxe.lang.Runtime.getField_f(start, "x", 120, true)) ) < 0 )) {
						difX = ( (( _line.dx > 0 )) ? (( 14 + global::haxe.lang.Runtime.getField_f(start, "gx", 23089, true) )) : (( ((double) (-14) ) - ((double) (global::haxe.lang.Runtime.getField_f(start, "gx", 23089, true)) ) )) );
					}
					else {
						difX = ( (( _line.dx > 0 )) ? (( ((double) (14) ) - ((double) (global::haxe.lang.Runtime.getField_f(start, "gx", 23089, true)) ) )) : ( - ((( global::haxe.lang.Runtime.getField_f(start, "gx", 23089, true) + 1 ))) ) );
					}
					
					if (( ((int) (global::haxe.lang.Runtime.getField_f(start, "y", 121, true)) ) < 0 )) {
						difY = ( (( _line.dy > 0 )) ? (( 14 + global::haxe.lang.Runtime.getField_f(start, "gy", 23090, true) )) : (( ((double) (-14) ) - ((double) (global::haxe.lang.Runtime.getField_f(start, "gy", 23090, true)) ) )) );
					}
					else {
						difY = ( (( _line.dy > 0 )) ? (( ((double) (14) ) - ((double) (global::haxe.lang.Runtime.getField_f(start, "gy", 23090, true)) ) )) : ( - ((( global::haxe.lang.Runtime.getField_f(start, "gy", 23090, true) + 1 ))) ) );
					}
					
					if (( _line.dx == 0 )) {
						y += difY;
					}
					else if (( _line.dy == 0 )) {
						x += difX;
					}
					else {
						double step = ( y + ( ( _line.dy * difX ) * invDx ) );
						if (( global::System.Math.Abs(((double) (( step - y )) )) < global::System.Math.Abs(((double) (difY) )) )) {
							x += difX;
							y = step;
						}
						else if (( global::System.Math.Abs(((double) (( step - y )) )) == global::System.Math.Abs(((double) (difY) )) )) {
							x += difX;
							y += difY;
						}
						else {
							x += ( ( _line.dx * difY ) * invDy );
							y += difY;
						}
						
					}
					
					start = global::hxlr.engine.Cell.getInfo(x, y);
					if (( ( ( ( ((int) (global::haxe.lang.Runtime.getField_f(start, "x", 120, true)) ) >= left ) && ( ((int) (global::haxe.lang.Runtime.getField_f(start, "x", 120, true)) ) <= right ) ) && ( ((int) (global::haxe.lang.Runtime.getField_f(start, "y", 121, true)) ) >= top ) ) && ( ((int) (global::haxe.lang.Runtime.getField_f(start, "y", 121, true)) ) <= bottom ) )) {
						global::hxlr.engine.Grid.storeLine(_line, start);
						continue;
					}
					
					return;
				}
				
			}
		}
		
		
		public static void addLine(global::hxlr.lines.LineObject _line) {
			unchecked {
				if ( ! (_line.id.hasValue) ) {
					_line.id = new global::haxe.lang.Null<int>(global::hxlr.engine.Grid.lineIDCount, true);
				}
				
				global::hxlr.engine.Grid.lines[(_line.id).@value] = _line;
				 ++ global::hxlr.engine.Grid.lineCount;
				 ++ global::hxlr.engine.Grid.lineIDCount;
				if ( ! (global::haxe.lang.Null<object>.ofDynamic<int>(global::hxlr.engine.Grid.subTypeCount[_line.type]).hasValue) ) {
					global::hxlr.engine.Grid.subTypeCount[_line.type] = ((object) (0) );
				}
				
				int __temp_expr1 = ((int) (global::haxe.lang.Runtime.toInt(global::hxlr.engine.Grid.subTypeCount[_line.type] = ((object) (( ((int) (global::haxe.lang.Runtime.toInt(global::hxlr.engine.Grid.subTypeCount[_line.type])) ) + 1 )) ))) );
			}
		}
		
		
		public static void storeLine(global::hxlr.lines.LineObject _line, object _info) {
			if (( ((global::hxlr.engine.Cell) ((((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (global::hxlr.engine.Grid.registry) )) ))) ).@get(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(_info, "key", 5343647, true)))).@value) ) == null )) {
				global::haxe.IMap<string, object> this1 = global::hxlr.engine.Grid.registry;
				string k = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(_info, "key", 5343647, true));
				global::hxlr.engine.Cell v = new global::hxlr.engine.Cell(((object) (_info) ));
				((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (this1) ))) ).@set(k, v);
			}
			
			((global::hxlr.engine.Cell) ((((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (global::hxlr.engine.Grid.registry) )) ))) ).@get(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(_info, "key", 5343647, true)))).@value) ).addLine(_line);
			_line.keyList.push(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(_info, "key", 5343647, true)));
		}
		
		
		public static void deleteTrack() {
			int _g = 0;
			global::Array<object> _g1 = global::hxlr.engine.Grid.lines;
			while (( _g < _g1.length )) {
				global::hxlr.lines.LineObject line = ((global::hxlr.lines.LineObject) (_g1[_g]) );
				 ++ _g;
				global::hxlr.engine.Grid.unregister(line);
			}
			
		}
		
		
		public static void unregister(global::hxlr.lines.LineObject _line) {
			unchecked {
				if (( _line == null )) {
					return;
				}
				
				{
					int _g = 0;
					global::Array<string> _g1 = _line.keyList;
					while (( _g < _g1.length )) {
						string key = _g1[_g];
						 ++ _g;
						((global::hxlr.engine.Cell) ((((global::haxe.ds.StringMap<object>) (global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, object>) (global::hxlr.engine.Grid.registry) )) ))) ).@get(key)).@value) ).removeLine(_line);
					}
					
				}
				
				 -- global::hxlr.engine.Grid.lineCount;
				int __temp_expr1 = ((int) (global::haxe.lang.Runtime.toInt(global::hxlr.engine.Grid.subTypeCount[_line.type] = ((object) (( ((int) (global::haxe.lang.Runtime.toInt(global::hxlr.engine.Grid.subTypeCount[_line.type])) ) - 1 )) ))) );
				global::hxlr.engine.Grid.lines[(_line.id).@value] = null;
			}
		}
		
		
	}
}


