// Generated by Haxe 4.1.5

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxlr.rider {
	public class AirPoint : global::hxlr.rider.ContactPoint {
		
		public AirPoint(global::haxe.lang.EmptyObject empty) : base(global::haxe.lang.EmptyObject.EMPTY) {
		}
		
		
		public AirPoint(double _x, double _y, double _af) : base(global::haxe.lang.EmptyObject.EMPTY) {
			global::hxlr.rider.AirPoint.__hx_ctor_hxlr_rider_AirPoint(this, _x, _y, _af);
		}
		
		
		protected static void __hx_ctor_hxlr_rider_AirPoint(global::hxlr.rider.AirPoint __hx_this, double _x, double _y, double _af) {
			global::hxlr.rider.ContactPoint.__hx_ctor_hxlr_rider_ContactPoint(__hx_this, new global::haxe.lang.Null<double>(_x, true), new global::haxe.lang.Null<double>(_y, true), default(global::haxe.lang.Null<double>));
			__hx_this.friction = _af;
		}
		
		
		public override void iterate(global::hxlr.math.geom.Point _gravity) {
			global::hxlr.math.geom.Point g = ( (( _gravity == null )) ? (this.gravity) : (_gravity) );
			this.dir.x = ( ( (( this.pos.x - this.vel.x )) * this.friction ) + g.x );
			this.dir.y = ( ( (( this.pos.y - this.vel.y )) * this.friction ) + g.y );
			this.vel = this.pos.clone();
			this.pos = this.pos.@add(this.dir);
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1657829882:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "iterate", 1657829882)) );
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
	}
}


