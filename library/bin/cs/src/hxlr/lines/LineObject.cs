// Generated by Haxe 4.1.5

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace hxlr.lines {
	public class LineObject : global::hxlr.math.geom.Line {
		
		public LineObject(global::haxe.lang.EmptyObject empty) : base(global::haxe.lang.EmptyObject.EMPTY) {
		}
		
		
		public LineObject(global::hxlr.math.geom.Point _start, global::hxlr.math.geom.Point _end, bool _shift, global::haxe.lang.Null<int> _lim) : base(global::haxe.lang.EmptyObject.EMPTY) {
			global::hxlr.lines.LineObject.__hx_ctor_hxlr_lines_LineObject(this, _start, _end, _shift, _lim);
		}
		
		
		protected static void __hx_ctor_hxlr_lines_LineObject(global::hxlr.lines.LineObject __hx_this, global::hxlr.math.geom.Point _start, global::hxlr.math.geom.Point _end, bool _shift, global::haxe.lang.Null<int> _lim) {
			unchecked {
				__hx_this.limValue = 0;
				__hx_this.limEnd = 0;
				__hx_this.limStart = 0;
				__hx_this.limType = 0;
				__hx_this.zone = 10;
				__hx_this.tangible = false;
				{
					global::haxe.lang.Null<int> _lim1 = ( ( ! (_lim.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (_lim) );
					global::hxlr.math.geom.Line.__hx_ctor_hxlr_math_geom_Line(__hx_this, _start, _end);
					__hx_this.gfxEnd = new global::hxlr.math.geom.Point(new global::haxe.lang.Null<double>(( __hx_this.end.x - __hx_this.start.x ), true), new global::haxe.lang.Null<double>(( __hx_this.end.y - __hx_this.start.y ), true));
					__hx_this.shifted = _shift;
					__hx_this.keyList = new global::Array<string>();
					__hx_this.calculateConstants();
					__hx_this.setLim((_lim1).@value);
				}
				
			}
		}
		
		
		public global::haxe.lang.Null<int> id;
		
		public int type;
		
		public bool tangible;
		
		public global::Array<string> keyList;
		
		public global::hxlr.math.geom.Point gfxEnd;
		
		public bool shifted;
		
		public double dx;
		
		public double dy;
		
		public double C;
		
		public double distance;
		
		public double invSqrDistance;
		
		public double invDistance;
		
		public double nx;
		
		public double ny;
		
		public int zone;
		
		public int limType;
		
		public double limStart;
		
		public double limEnd;
		
		public double limValue;
		
		public global::hxlr.lines.LineObject prevLine;
		
		public global::hxlr.lines.LineObject nextLine;
		
		public override double set_length(double @value) {
			base.set_length(@value);
			this.calculateConstants();
			return @value;
		}
		
		
		public virtual void calculateConstants() {
			unchecked {
				this.dx = ( this.end.x - this.start.x );
				this.dy = ( this.end.y - this.start.y );
				this.C = ( ( this.dy * this.start.x ) - ( this.dx * this.start.y ) );
				double _loc2 = ( global::System.Math.Pow(((double) (this.dx) ), ((double) (2) )) + global::System.Math.Pow(((double) (this.dy) ), ((double) (2) )) );
				this.invSqrDistance = ( 1 / _loc2 );
				this.distance = global::System.Math.Sqrt(((double) (_loc2) ));
				this.invDistance = ( 1 / this.distance );
				this.nx = ( ( this.dy * this.invDistance ) * (( (this.shifted) ? (1) : (-1) )) );
				this.ny = ( ( this.dx * this.invDistance ) * (( (this.shifted) ? (-1) : (1) )) );
				this.limValue = global::System.Math.Min(((double) (0.25) ), ((double) (( this.zone / this.distance )) ));
			}
		}
		
		
		public virtual void setLim(int _limMode) {
			unchecked {
				switch (_limMode) {
					case 0:
					{
						this.limStart = ((double) (0) );
						this.limEnd = ((double) (1) );
						break;
					}
					
					
					case 1:
					{
						this.limStart =  - (this.limValue) ;
						this.limEnd = ((double) (1) );
						break;
					}
					
					
					case 2:
					{
						this.limStart = ((double) (0) );
						this.limEnd = ( 1 + this.limValue );
						break;
					}
					
					
					case 3:
					{
						this.limStart =  - (this.limValue) ;
						this.limEnd = ( 1 + this.limValue );
						break;
					}
					
					
				}
				
				this.limType = _limMode;
			}
		}
		
		
		public virtual void collide(global::hxlr.rider.ContactPoint _point) {
		}
		
		
		public virtual object toSaveObject() {
			unchecked {
				bool save = default(bool);
				switch (this.limType) {
					case 1:
					case 3:
					{
						save = true;
						break;
					}
					
					
					case 0:
					case 2:
					{
						save = false;
						break;
					}
					
					
					default:
					{
						save = false;
						break;
					}
					
				}
				
				bool save1 = default(bool);
				switch (this.limType) {
					case 0:
					case 1:
					{
						save1 = false;
						break;
					}
					
					
					case 2:
					case 3:
					{
						save1 = true;
						break;
					}
					
					
					default:
					{
						save1 = false;
						break;
					}
					
				}
				
				object save2 = new global::haxe.lang.DynamicObject(new int[]{23515, 35289056, 1323686069, 2139647042}, new object[]{(this.id).toDynamic(), save, save1, this.shifted}, new int[]{26809, 26810, 27032, 27033, 1292432058}, new double[]{this.start.x, this.end.x, this.start.y, this.end.y, ((double) (this.type) )});
				return save2;
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 157425153:
					{
						this.limValue = ((double) (@value) );
						return @value;
					}
					
					
					case 1809768043:
					{
						this.limEnd = ((double) (@value) );
						return @value;
					}
					
					
					case 1538593522:
					{
						this.limStart = ((double) (@value) );
						return @value;
					}
					
					
					case 18241066:
					{
						this.limType = ((int) (@value) );
						return @value;
					}
					
					
					case 1358471724:
					{
						this.zone = ((int) (@value) );
						return @value;
					}
					
					
					case 24651:
					{
						this.ny = ((double) (@value) );
						return @value;
					}
					
					
					case 24650:
					{
						this.nx = ((double) (@value) );
						return @value;
					}
					
					
					case 2083206470:
					{
						this.invDistance = ((double) (@value) );
						return @value;
					}
					
					
					case 2117167096:
					{
						this.invSqrDistance = ((double) (@value) );
						return @value;
					}
					
					
					case 1811518261:
					{
						this.distance = ((double) (@value) );
						return @value;
					}
					
					
					case 67:
					{
						this.C = ((double) (@value) );
						return @value;
					}
					
					
					case 22421:
					{
						this.dy = ((double) (@value) );
						return @value;
					}
					
					
					case 22420:
					{
						this.dx = ((double) (@value) );
						return @value;
					}
					
					
					case 1292432058:
					{
						this.type = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1937751687:
					{
						this.nextLine = ((global::hxlr.lines.LineObject) (@value) );
						return @value;
					}
					
					
					case 276887687:
					{
						this.prevLine = ((global::hxlr.lines.LineObject) (@value) );
						return @value;
					}
					
					
					case 157425153:
					{
						this.limValue = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 1809768043:
					{
						this.limEnd = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 1538593522:
					{
						this.limStart = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 18241066:
					{
						this.limType = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1358471724:
					{
						this.zone = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 24651:
					{
						this.ny = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 24650:
					{
						this.nx = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 2083206470:
					{
						this.invDistance = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 2117167096:
					{
						this.invSqrDistance = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 1811518261:
					{
						this.distance = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 67:
					{
						this.C = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 22421:
					{
						this.dy = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 22420:
					{
						this.dx = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 2082007393:
					{
						this.shifted = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 958901218:
					{
						this.gfxEnd = ((global::hxlr.math.geom.Point) (@value) );
						return @value;
					}
					
					
					case 562859421:
					{
						this.keyList = ((global::Array<string>) (global::Array<object>.__hx_cast<string>(((global::Array) (@value) ))) );
						return @value;
					}
					
					
					case 1001867384:
					{
						this.tangible = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 1292432058:
					{
						this.type = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 23515:
					{
						this.id = global::haxe.lang.Null<object>.ofDynamic<int>(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 2144877367:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toSaveObject", 2144877367)) );
					}
					
					
					case 1835249534:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "collide", 1835249534)) );
					}
					
					
					case 1869208782:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "setLim", 1869208782)) );
					}
					
					
					case 1493492809:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "calculateConstants", 1493492809)) );
					}
					
					
					case 319595299:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_length", 319595299)) );
					}
					
					
					case 1937751687:
					{
						return this.nextLine;
					}
					
					
					case 276887687:
					{
						return this.prevLine;
					}
					
					
					case 157425153:
					{
						return this.limValue;
					}
					
					
					case 1809768043:
					{
						return this.limEnd;
					}
					
					
					case 1538593522:
					{
						return this.limStart;
					}
					
					
					case 18241066:
					{
						return this.limType;
					}
					
					
					case 1358471724:
					{
						return this.zone;
					}
					
					
					case 24651:
					{
						return this.ny;
					}
					
					
					case 24650:
					{
						return this.nx;
					}
					
					
					case 2083206470:
					{
						return this.invDistance;
					}
					
					
					case 2117167096:
					{
						return this.invSqrDistance;
					}
					
					
					case 1811518261:
					{
						return this.distance;
					}
					
					
					case 67:
					{
						return this.C;
					}
					
					
					case 22421:
					{
						return this.dy;
					}
					
					
					case 22420:
					{
						return this.dx;
					}
					
					
					case 2082007393:
					{
						return this.shifted;
					}
					
					
					case 958901218:
					{
						return this.gfxEnd;
					}
					
					
					case 562859421:
					{
						return this.keyList;
					}
					
					
					case 1001867384:
					{
						return this.tangible;
					}
					
					
					case 1292432058:
					{
						return this.type;
					}
					
					
					case 23515:
					{
						return (this.id).toDynamic();
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 157425153:
					{
						return this.limValue;
					}
					
					
					case 1809768043:
					{
						return this.limEnd;
					}
					
					
					case 1538593522:
					{
						return this.limStart;
					}
					
					
					case 18241066:
					{
						return ((double) (this.limType) );
					}
					
					
					case 1358471724:
					{
						return ((double) (this.zone) );
					}
					
					
					case 24651:
					{
						return this.ny;
					}
					
					
					case 24650:
					{
						return this.nx;
					}
					
					
					case 2083206470:
					{
						return this.invDistance;
					}
					
					
					case 2117167096:
					{
						return this.invSqrDistance;
					}
					
					
					case 1811518261:
					{
						return this.distance;
					}
					
					
					case 67:
					{
						return this.C;
					}
					
					
					case 22421:
					{
						return this.dy;
					}
					
					
					case 22420:
					{
						return this.dx;
					}
					
					
					case 1292432058:
					{
						return ((double) (this.type) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 319595299:
					{
						return global::haxe.lang.Runtime.slowCallField(this, field, dynargs);
					}
					
					
					case 2144877367:
					{
						return this.toSaveObject();
					}
					
					
					case 1835249534:
					{
						this.collide(((global::hxlr.rider.ContactPoint) (dynargs[0]) ));
						break;
					}
					
					
					case 1869208782:
					{
						this.setLim(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 1493492809:
					{
						this.calculateConstants();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			baseArr.push("nextLine");
			baseArr.push("prevLine");
			baseArr.push("limValue");
			baseArr.push("limEnd");
			baseArr.push("limStart");
			baseArr.push("limType");
			baseArr.push("zone");
			baseArr.push("ny");
			baseArr.push("nx");
			baseArr.push("invDistance");
			baseArr.push("invSqrDistance");
			baseArr.push("distance");
			baseArr.push("C");
			baseArr.push("dy");
			baseArr.push("dx");
			baseArr.push("shifted");
			baseArr.push("gfxEnd");
			baseArr.push("keyList");
			baseArr.push("tangible");
			baseArr.push("type");
			baseArr.push("id");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


