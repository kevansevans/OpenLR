// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_hxlr_lines_Floor
#include <hxlr/lines/Floor.h>
#endif
#ifndef INCLUDED_hxlr_lines_LineBase
#include <hxlr/lines/LineBase.h>
#endif
#ifndef INCLUDED_hxlr_math_geom_Point
#include <hxlr/math/geom/Point.h>
#endif
#ifndef INCLUDED_hxlr_rider_ContactPoint
#include <hxlr/rider/ContactPoint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0b3111ad0cdb0af0_15_new,"hxlr.lines.Floor","new",0xdd4eb297,"hxlr.lines.Floor.new","hxlr/lines/Floor.hx",15,0xaef1f57b)
HX_LOCAL_STACK_FRAME(_hx_pos_0b3111ad0cdb0af0_24_collide,"hxlr.lines.Floor","collide",0x09817935,"hxlr.lines.Floor.collide","hxlr/lines/Floor.hx",24,0xaef1f57b)
namespace hxlr{
namespace lines{

void Floor_obj::__construct( ::hxlr::math::geom::Point _start, ::hxlr::math::geom::Point _end,bool _shift){
            	HX_STACKFRAME(&_hx_pos_0b3111ad0cdb0af0_15_new)
HXLINE(  16)		super::__construct(_start,_end,_shift,null());
HXLINE(  18)		this->type = 0;
HXLINE(  20)		this->tangible = true;
            	}

Dynamic Floor_obj::__CreateEmpty() { return new Floor_obj; }

void *Floor_obj::_hx_vtable = 0;

Dynamic Floor_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Floor_obj > _hx_result = new Floor_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Floor_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x041acbee) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x041acbee;
	} else {
		return inClassId==(int)0x3812bec7;
	}
}

void Floor_obj::collide( ::hxlr::rider::ContactPoint _point){
            	HX_STACKFRAME(&_hx_pos_0b3111ad0cdb0af0_24_collide)
HXLINE(  25)		Float _loc5 = (_point->pos->x - this->start->x);
HXLINE(  26)		Float _loc6 = (_point->pos->y - this->start->y);
HXLINE(  27)		Float _loc4 = ((this->nx * _loc5) + (this->ny * _loc6));
HXLINE(  28)		Float _loc7 = (((_loc5 * this->dx) + (_loc6 * this->dy)) * this->invSqrDistance);
HXLINE(  30)		if ((((_point->dir->x * this->nx) + (_point->dir->y * this->ny)) > 0)) {
HXLINE(  32)			bool _hx_tmp;
HXDLIN(  32)			bool _hx_tmp1;
HXDLIN(  32)			bool _hx_tmp2;
HXDLIN(  32)			if ((_loc4 > 0)) {
HXLINE(  32)				_hx_tmp2 = (_loc4 < this->zone);
            			}
            			else {
HXLINE(  32)				_hx_tmp2 = false;
            			}
HXDLIN(  32)			if (_hx_tmp2) {
HXLINE(  32)				_hx_tmp1 = (_loc7 >= this->limStart);
            			}
            			else {
HXLINE(  32)				_hx_tmp1 = false;
            			}
HXDLIN(  32)			if (_hx_tmp1) {
HXLINE(  32)				_hx_tmp = (_loc7 <= this->limEnd);
            			}
            			else {
HXLINE(  32)				_hx_tmp = false;
            			}
HXDLIN(  32)			if (_hx_tmp) {
HXLINE(  33)				_point->pos->x = (_point->pos->x - (_loc4 * this->nx));
HXLINE(  34)				_point->pos->y = (_point->pos->y - (_loc4 * this->ny));
HXLINE(  35)				int _hx_tmp;
HXDLIN(  35)				if ((_point->vel->x < _point->pos->x)) {
HXLINE(  35)					_hx_tmp = 1;
            				}
            				else {
HXLINE(  35)					_hx_tmp = -1;
            				}
HXDLIN(  35)				_point->vel->x = (_point->vel->x + (((this->ny * _point->friction) * _loc4) * ( (Float)(_hx_tmp) )));
HXLINE(  36)				int _hx_tmp1;
HXDLIN(  36)				if ((_point->vel->y < _point->pos->y)) {
HXLINE(  36)					_hx_tmp1 = -1;
            				}
            				else {
HXLINE(  36)					_hx_tmp1 = 1;
            				}
HXDLIN(  36)				_point->vel->y = (_point->vel->y - (((this->nx * _point->friction) * _loc4) * ( (Float)(_hx_tmp1) )));
            			}
            		}
            	}



::hx::ObjectPtr< Floor_obj > Floor_obj::__new( ::hxlr::math::geom::Point _start, ::hxlr::math::geom::Point _end,bool _shift) {
	::hx::ObjectPtr< Floor_obj > __this = new Floor_obj();
	__this->__construct(_start,_end,_shift);
	return __this;
}

::hx::ObjectPtr< Floor_obj > Floor_obj::__alloc(::hx::Ctx *_hx_ctx, ::hxlr::math::geom::Point _start, ::hxlr::math::geom::Point _end,bool _shift) {
	Floor_obj *__this = (Floor_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Floor_obj), true, "hxlr.lines.Floor"));
	*(void **)__this = Floor_obj::_hx_vtable;
	__this->__construct(_start,_end,_shift);
	return __this;
}

Floor_obj::Floor_obj()
{
}

::hx::Val Floor_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"collide") ) { return ::hx::Val( collide_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Floor_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Floor_obj_sStaticStorageInfo = 0;
#endif

static ::String Floor_obj_sMemberFields[] = {
	HX_("collide",7e,af,63,ed),
	::String(null()) };

::hx::Class Floor_obj::__mClass;

void Floor_obj::__register()
{
	Floor_obj _hx_dummy;
	Floor_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxlr.lines.Floor",25,1b,16,dc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Floor_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Floor_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Floor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Floor_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxlr
} // end namespace lines
