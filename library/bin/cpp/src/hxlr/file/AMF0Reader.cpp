// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_hxlr_file_AMF0Reader
#include <hxlr/file/AMF0Reader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_83e413b85be6294b_12_new,"hxlr.file.AMF0Reader","new",0xfb41fb45,"hxlr.file.AMF0Reader.new","hxlr/file/AMF0Reader.hx",12,0x44d63b6b)
HX_LOCAL_STACK_FRAME(_hx_pos_83e413b85be6294b_72_recursiveRead,"hxlr.file.AMF0Reader","recursiveRead",0xe8d45f0d,"hxlr.file.AMF0Reader.recursiveRead","hxlr/file/AMF0Reader.hx",72,0x44d63b6b)
HX_LOCAL_STACK_FRAME(_hx_pos_83e413b85be6294b_81_loadSOLTrack,"hxlr.file.AMF0Reader","loadSOLTrack",0xbe3810dc,"hxlr.file.AMF0Reader.loadSOLTrack","hxlr/file/AMF0Reader.hx",81,0x44d63b6b)
namespace hxlr{
namespace file{

void AMF0Reader_obj::__construct( ::haxe::io::Bytes _sol){
            	HX_STACKFRAME(&_hx_pos_83e413b85be6294b_12_new)
HXLINE(  21)		this->object =  ::Dynamic(::hx::Anon_obj::Create(0));
HXLINE(  17)		this->pos = 0;
HXLINE(  27)		this->data = _sol;
HXLINE(  29)		int _hx_tmp = (( (int)(this->data->b->__get(this->pos)) ) << 8);
HXDLIN(  29)		 ::hxlr::file::AMF0Reader pos = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  29)		pos->pos = (pos->pos + 1);
HXDLIN(  29)		this->header = (_hx_tmp | ( (int)(this->data->b->__get(pos->pos)) ));
HXLINE(  30)		 ::hxlr::file::AMF0Reader pos1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  30)		pos1->pos = (pos1->pos + 1);
HXDLIN(  30)		int _hx_tmp1 = (( (int)(this->data->b->__get(pos1->pos)) ) << 24);
HXDLIN(  30)		 ::hxlr::file::AMF0Reader pos2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  30)		pos2->pos = (pos2->pos + 1);
HXDLIN(  30)		int _hx_tmp2 = (_hx_tmp1 | (( (int)(this->data->b->__get(pos2->pos)) ) << 16));
HXDLIN(  30)		 ::hxlr::file::AMF0Reader pos3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  30)		pos3->pos = (pos3->pos + 1);
HXDLIN(  30)		int _hx_tmp3 = (_hx_tmp2 | (( (int)(this->data->b->__get(pos3->pos)) ) << 8));
HXDLIN(  30)		 ::hxlr::file::AMF0Reader pos4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  30)		pos4->pos = (pos4->pos + 1);
HXDLIN(  30)		this->size = (_hx_tmp3 | ( (int)(this->data->b->__get(pos4->pos)) ));
HXLINE(  32)		if ((this->size > this->data->length)) {
HXLINE(  33)			::haxe::Log_obj::trace(HX_("Internal size value greater than file size!",6a,68,d3,75),::hx::SourceInfo(HX_("src/hxlr/file/AMF0Reader.hx",00,94,0d,ac),33,HX_("hxlr.file.AMF0Reader",d3,f4,ef,75),HX_("new",60,d0,53,00)));
HXLINE(  34)			return;
            		}
HXLINE(  37)		 ::hxlr::file::AMF0Reader tcso = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  37)		tcso->pos = (tcso->pos + 1);
HXDLIN(  37)		::String tcso1 = this->data->getString(tcso->pos,4,null());
HXLINE(  38)		if ((tcso1.toUpperCase() != HX_("TCSO",cb,0b,b9,37))) {
HXLINE(  39)			::haxe::Log_obj::trace(HX_("Not a valid .sol/AMF0 file!",98,ae,50,aa), ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("hxlr.file.AMF0Reader",d3,f4,ef,75))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0,tcso1))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("new",60,d0,53,00))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("src/hxlr/file/AMF0Reader.hx",00,94,0d,ac))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),39)));
HXLINE(  40)			return;
            		}
HXLINE(  42)		 ::hxlr::file::AMF0Reader _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  42)		_hx_tmp4->pos = (_hx_tmp4->pos + 11);
HXLINE(  44)		int saveNameSize = ( (int)(this->data->b->__get(this->pos)) );
HXLINE(  45)		 ::hxlr::file::AMF0Reader saveNameField = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  45)		saveNameField->pos = (saveNameField->pos + 1);
HXDLIN(  45)		::String saveNameField1 = this->data->getString(saveNameField->pos,saveNameSize,null());
HXLINE(  46)		if ((saveNameField1 != HX_("savedLines",f8,79,04,18))) {
HXLINE(  47)			::haxe::Log_obj::trace(saveNameSize, ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("hxlr.file.AMF0Reader",d3,f4,ef,75))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0,saveNameField1))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("new",60,d0,53,00))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("src/hxlr/file/AMF0Reader.hx",00,94,0d,ac))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),47)));
HXLINE(  48)			::haxe::Log_obj::trace(HX_("Unable to locate savedLines!",d3,57,8a,91),::hx::SourceInfo(HX_("src/hxlr/file/AMF0Reader.hx",00,94,0d,ac),48,HX_("hxlr.file.AMF0Reader",d3,f4,ef,75),HX_("new",60,d0,53,00)));
HXLINE(  49)			return;
            		}
HXLINE(  51)		 ::hxlr::file::AMF0Reader _hx_tmp5 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  51)		_hx_tmp5->pos = (_hx_tmp5->pos + (saveNameSize + 4));
HXLINE(  53)		int trackListNameSize = (( (int)(this->data->b->__get(this->pos)) ) << 8);
HXDLIN(  53)		 ::hxlr::file::AMF0Reader pos5 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  53)		pos5->pos = (pos5->pos + 1);
HXDLIN(  53)		int trackListNameSize1 = (trackListNameSize | ( (int)(this->data->b->__get(pos5->pos)) ));
HXLINE(  54)		 ::hxlr::file::AMF0Reader trackListField = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  54)		trackListField->pos = (trackListField->pos + 1);
HXDLIN(  54)		::String trackListField1 = this->data->getString(trackListField->pos,trackListNameSize1,null());
HXLINE(  56)		if ((trackListField1 != HX_("trackList",89,78,3d,33))) {
HXLINE(  57)			::haxe::Log_obj::trace(trackListNameSize1, ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("hxlr.file.AMF0Reader",d3,f4,ef,75))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0,trackListField1))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("new",60,d0,53,00))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("src/hxlr/file/AMF0Reader.hx",00,94,0d,ac))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),57)));
HXLINE(  58)			::haxe::Log_obj::trace(HX_("Unable to locate trackList!",0e,2a,ed,71),::hx::SourceInfo(HX_("src/hxlr/file/AMF0Reader.hx",00,94,0d,ac),58,HX_("hxlr.file.AMF0Reader",d3,f4,ef,75),HX_("new",60,d0,53,00)));
HXLINE(  59)			return;
            		}
HXLINE(  62)		this->loadedSOL =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("trackList",89,78,3d,33),::Array_obj< ::Dynamic>::__new(0)));
HXLINE(  66)		 ::hxlr::file::AMF0Reader pos6 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  66)		pos6->pos = (pos6->pos + trackListNameSize1);
HXDLIN(  66)		this->recursiveRead(( (int)(this->data->b->__get(pos6->pos)) ));
            	}

Dynamic AMF0Reader_obj::__CreateEmpty() { return new AMF0Reader_obj; }

void *AMF0Reader_obj::_hx_vtable = 0;

Dynamic AMF0Reader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AMF0Reader_obj > _hx_result = new AMF0Reader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AMF0Reader_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7e5202cb;
}

void AMF0Reader_obj::recursiveRead(int _code){
            	HX_STACKFRAME(&_hx_pos_83e413b85be6294b_72_recursiveRead)
HXDLIN(  72)		bool _hx_tmp = (_code == 8);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AMF0Reader_obj,recursiveRead,(void))

 ::Dynamic AMF0Reader_obj::loadSOLTrack(int _index){
            	HX_STACKFRAME(&_hx_pos_83e413b85be6294b_81_loadSOLTrack)
HXDLIN(  81)		return  ::Dynamic(::hx::Anon_obj::Create(0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AMF0Reader_obj,loadSOLTrack,return )


::hx::ObjectPtr< AMF0Reader_obj > AMF0Reader_obj::__new( ::haxe::io::Bytes _sol) {
	::hx::ObjectPtr< AMF0Reader_obj > __this = new AMF0Reader_obj();
	__this->__construct(_sol);
	return __this;
}

::hx::ObjectPtr< AMF0Reader_obj > AMF0Reader_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::io::Bytes _sol) {
	AMF0Reader_obj *__this = (AMF0Reader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AMF0Reader_obj), true, "hxlr.file.AMF0Reader"));
	*(void **)__this = AMF0Reader_obj::_hx_vtable;
	__this->__construct(_sol);
	return __this;
}

AMF0Reader_obj::AMF0Reader_obj()
{
}

void AMF0Reader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AMF0Reader);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(header,"header");
	HX_MARK_MEMBER_NAME(object,"object");
	HX_MARK_MEMBER_NAME(loadedSOL,"loadedSOL");
	HX_MARK_END_CLASS();
}

void AMF0Reader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(header,"header");
	HX_VISIT_MEMBER_NAME(object,"object");
	HX_VISIT_MEMBER_NAME(loadedSOL,"loadedSOL");
}

::hx::Val AMF0Reader_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return ::hx::Val( pos ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"size") ) { return ::hx::Val( size ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"header") ) { return ::hx::Val( header ); }
		if (HX_FIELD_EQ(inName,"object") ) { return ::hx::Val( object ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadedSOL") ) { return ::hx::Val( loadedSOL ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadSOLTrack") ) { return ::hx::Val( loadSOLTrack_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"recursiveRead") ) { return ::hx::Val( recursiveRead_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AMF0Reader_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"header") ) { header=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"object") ) { object=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadedSOL") ) { loadedSOL=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AMF0Reader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("pos",94,5d,55,00));
	outFields->push(HX_("size",c1,a0,53,4c));
	outFields->push(HX_("header",8d,09,00,fd));
	outFields->push(HX_("object",bf,7e,3f,15));
	outFields->push(HX_("loadedSOL",4b,09,db,f1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AMF0Reader_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(AMF0Reader_obj,data),HX_("data",2a,56,63,42)},
	{::hx::fsInt,(int)offsetof(AMF0Reader_obj,pos),HX_("pos",94,5d,55,00)},
	{::hx::fsInt,(int)offsetof(AMF0Reader_obj,size),HX_("size",c1,a0,53,4c)},
	{::hx::fsInt,(int)offsetof(AMF0Reader_obj,header),HX_("header",8d,09,00,fd)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AMF0Reader_obj,object),HX_("object",bf,7e,3f,15)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AMF0Reader_obj,loadedSOL),HX_("loadedSOL",4b,09,db,f1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AMF0Reader_obj_sStaticStorageInfo = 0;
#endif

static ::String AMF0Reader_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("pos",94,5d,55,00),
	HX_("size",c1,a0,53,4c),
	HX_("header",8d,09,00,fd),
	HX_("object",bf,7e,3f,15),
	HX_("loadedSOL",4b,09,db,f1),
	HX_("recursiveRead",e8,c3,d7,f3),
	HX_("loadSOLTrack",61,40,9e,4c),
	::String(null()) };

::hx::Class AMF0Reader_obj::__mClass;

void AMF0Reader_obj::__register()
{
	AMF0Reader_obj _hx_dummy;
	AMF0Reader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxlr.file.AMF0Reader",d3,f4,ef,75);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AMF0Reader_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AMF0Reader_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AMF0Reader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AMF0Reader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxlr
} // end namespace file
