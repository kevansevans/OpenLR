// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_hxlr_math_geom_Point
#include <hxlr/math/geom/Point.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_15db1b7e72691bac_18_new,"hxlr.math.geom.Point","new",0xfd85ddfe,"hxlr.math.geom.Point.new","hxlr/math/geom/Point.hx",18,0x8e083bd3)
HX_LOCAL_STACK_FRAME(_hx_pos_15db1b7e72691bac_24_clone,"hxlr.math.geom.Point","clone",0x806a447b,"hxlr.math.geom.Point.clone","hxlr/math/geom/Point.hx",24,0x8e083bd3)
HX_LOCAL_STACK_FRAME(_hx_pos_15db1b7e72691bac_27_add,"hxlr.math.geom.Point","add",0xfd7bffbf,"hxlr.math.geom.Point.add","hxlr/math/geom/Point.hx",27,0x8e083bd3)
HX_LOCAL_STACK_FRAME(_hx_pos_15db1b7e72691bac_33_sub,"hxlr.math.geom.Point","sub",0xfd89b71e,"hxlr.math.geom.Point.sub","hxlr/math/geom/Point.hx",33,0x8e083bd3)
namespace hxlr{
namespace math{
namespace geom{

void Point_obj::__construct(::hx::Null< Float >  __o__x,::hx::Null< Float >  __o__y){
            		Float _x = __o__x.Default(((Float)0.0));
            		Float _y = __o__y.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_15db1b7e72691bac_18_new)
HXLINE(  19)		this->x = _x;
HXLINE(  20)		this->y = _y;
            	}

Dynamic Point_obj::__CreateEmpty() { return new Point_obj; }

void *Point_obj::_hx_vtable = 0;

Dynamic Point_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Point_obj > _hx_result = new Point_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Point_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0c49e356;
}

 ::hxlr::math::geom::Point Point_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_15db1b7e72691bac_24_clone)
HXDLIN(  24)		return  ::hxlr::math::geom::Point_obj::__alloc( HX_CTX ,this->x,this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Point_obj,clone,return )

 ::hxlr::math::geom::Point Point_obj::add( ::hxlr::math::geom::Point _point){
            	HX_STACKFRAME(&_hx_pos_15db1b7e72691bac_27_add)
HXLINE(  28)		 ::hxlr::math::geom::Point _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  28)		_hx_tmp->x = (_hx_tmp->x + _point->x);
HXLINE(  29)		 ::hxlr::math::geom::Point _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  29)		_hx_tmp1->y = (_hx_tmp1->y + _point->y);
HXLINE(  30)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Point_obj,add,return )

 ::hxlr::math::geom::Point Point_obj::sub( ::hxlr::math::geom::Point _point){
            	HX_STACKFRAME(&_hx_pos_15db1b7e72691bac_33_sub)
HXLINE(  34)		 ::hxlr::math::geom::Point _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  34)		_hx_tmp->x = (_hx_tmp->x - _point->x);
HXLINE(  35)		 ::hxlr::math::geom::Point _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  35)		_hx_tmp1->y = (_hx_tmp1->y - _point->y);
HXLINE(  36)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Point_obj,sub,return )


Point_obj::Point_obj()
{
}

::hx::Val Point_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"sub") ) { return ::hx::Val( sub_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Point_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Point_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Point_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Point_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Point_obj,y),HX_("y",79,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Point_obj_sStaticStorageInfo = 0;
#endif

static ::String Point_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("clone",5d,13,63,48),
	HX_("add",21,f2,49,00),
	HX_("sub",80,a9,57,00),
	::String(null()) };

::hx::Class Point_obj::__mClass;

void Point_obj::__register()
{
	Point_obj _hx_dummy;
	Point_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxlr.math.geom.Point",0c,c7,0b,57);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Point_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Point_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Point_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Point_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxlr
} // end namespace math
} // end namespace geom
