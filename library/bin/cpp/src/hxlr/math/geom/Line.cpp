// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_hxlr_math_geom_Line
#include <hxlr/math/geom/Line.h>
#endif
#ifndef INCLUDED_hxlr_math_geom_Point
#include <hxlr/math/geom/Point.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a8da5b0d2dac31ef_13_new,"hxlr.math.geom.Line","new",0xb82b0daa,"hxlr.math.geom.Line.new","hxlr/math/geom/Line.hx",13,0x668ab385)
namespace hxlr{
namespace math{
namespace geom{

void Line_obj::__construct( ::hxlr::math::geom::Point _start, ::hxlr::math::geom::Point _end){
            	HX_STACKFRAME(&_hx_pos_a8da5b0d2dac31ef_13_new)
            	}

Dynamic Line_obj::__CreateEmpty() { return new Line_obj; }

void *Line_obj::_hx_vtable = 0;

Dynamic Line_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Line_obj > _hx_result = new Line_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Line_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2a2a2bae;
}


::hx::ObjectPtr< Line_obj > Line_obj::__new( ::hxlr::math::geom::Point _start, ::hxlr::math::geom::Point _end) {
	::hx::ObjectPtr< Line_obj > __this = new Line_obj();
	__this->__construct(_start,_end);
	return __this;
}

::hx::ObjectPtr< Line_obj > Line_obj::__alloc(::hx::Ctx *_hx_ctx, ::hxlr::math::geom::Point _start, ::hxlr::math::geom::Point _end) {
	Line_obj *__this = (Line_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Line_obj), true, "hxlr.math.geom.Line"));
	*(void **)__this = Line_obj::_hx_vtable;
	__this->__construct(_start,_end);
	return __this;
}

Line_obj::Line_obj()
{
}

void Line_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Line);
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_END_CLASS();
}

void Line_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(start,"start");
}

::hx::Val Line_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return ::hx::Val( start ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Line_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast<  ::hxlr::math::geom::Point >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Line_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("start",62,74,0b,84));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Line_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hxlr::math::geom::Point */ ,(int)offsetof(Line_obj,start),HX_("start",62,74,0b,84)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Line_obj_sStaticStorageInfo = 0;
#endif

static ::String Line_obj_sMemberFields[] = {
	HX_("start",62,74,0b,84),
	::String(null()) };

::hx::Class Line_obj::__mClass;

void Line_obj::__register()
{
	Line_obj _hx_dummy;
	Line_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxlr.math.geom.Line",b8,b0,9c,23);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Line_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Line_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Line_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Line_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxlr
} // end namespace math
} // end namespace geom
