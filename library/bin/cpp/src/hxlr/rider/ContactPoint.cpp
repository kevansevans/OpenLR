// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_hxlr_math_geom_Point
#include <hxlr/math/geom/Point.h>
#endif
#ifndef INCLUDED_hxlr_rider_ContactPoint
#include <hxlr/rider/ContactPoint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_18a1c4d795896f67_21_new,"hxlr.rider.ContactPoint","new",0x9101a2ee,"hxlr.rider.ContactPoint.new","hxlr/rider/ContactPoint.hx",21,0x1e8307c0)
HX_LOCAL_STACK_FRAME(_hx_pos_18a1c4d795896f67_29_iterate,"hxlr.rider.ContactPoint","iterate",0xb6b5ab88,"hxlr.rider.ContactPoint.iterate","hxlr/rider/ContactPoint.hx",29,0x1e8307c0)
HX_LOCAL_STACK_FRAME(_hx_pos_18a1c4d795896f67_43_serialize,"hxlr.rider.ContactPoint","serialize",0x71b18eee,"hxlr.rider.ContactPoint.serialize","hxlr/rider/ContactPoint.hx",43,0x1e8307c0)
HX_LOCAL_STACK_FRAME(_hx_pos_18a1c4d795896f67_52_deserialize,"hxlr.rider.ContactPoint","deserialize",0xb8ed9ecd,"hxlr.rider.ContactPoint.deserialize","hxlr/rider/ContactPoint.hx",52,0x1e8307c0)
namespace hxlr{
namespace rider{

void ContactPoint_obj::__construct(::hx::Null< Float >  __o__x,::hx::Null< Float >  __o__y,::hx::Null< Float >  __o__friction){
            		Float _x = __o__x.Default(((Float)0.0));
            		Float _y = __o__y.Default(((Float)0.0));
            		Float _friction = __o__friction.Default(((Float)0.0));
            	HX_GC_STACKFRAME(&_hx_pos_18a1c4d795896f67_21_new)
HXLINE(  22)		this->pos =  ::hxlr::math::geom::Point_obj::__alloc( HX_CTX ,_x,_y);
HXLINE(  23)		this->dir =  ::hxlr::math::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  24)		this->vel =  ::hxlr::math::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  26)		this->friction = _friction;
            	}

Dynamic ContactPoint_obj::__CreateEmpty() { return new ContactPoint_obj; }

void *ContactPoint_obj::_hx_vtable = 0;

Dynamic ContactPoint_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ContactPoint_obj > _hx_result = new ContactPoint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ContactPoint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x404443b0;
}

void ContactPoint_obj::iterate( ::hxlr::math::geom::Point _gravity){
            	HX_STACKFRAME(&_hx_pos_18a1c4d795896f67_29_iterate)
HXLINE(  31)		 ::hxlr::math::geom::Point g;
HXDLIN(  31)		if (::hx::IsNull( _gravity )) {
HXLINE(  31)			g = this->gravity;
            		}
            		else {
HXLINE(  31)			g = _gravity;
            		}
HXLINE(  33)		this->dir->x = ((this->pos->x - this->vel->x) + g->x);
HXLINE(  34)		this->dir->y = ((this->pos->y - this->vel->y) + g->y);
HXLINE(  36)		this->vel = this->pos->clone();
HXLINE(  38)		this->pos = this->pos->add(this->dir);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ContactPoint_obj,iterate,(void))

 ::Dynamic ContactPoint_obj::serialize(){
            	HX_STACKFRAME(&_hx_pos_18a1c4d795896f67_43_serialize)
HXLINE(  44)		 ::Dynamic object =  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("friction",fa,78,c9,97),this->friction)
            			->setFixed(1,HX_("position",a9,a0,fa,ca),this->pos)
            			->setFixed(2,HX_("velocity",1d,02,fe,1e),this->vel));
HXLINE(  49)		return object;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ContactPoint_obj,serialize,return )

void ContactPoint_obj::deserialize( ::Dynamic _object){
            	HX_STACKFRAME(&_hx_pos_18a1c4d795896f67_52_deserialize)
HXLINE(  53)		this->pos = ( ( ::hxlr::math::geom::Point)(_object->__Field(HX_("position",a9,a0,fa,ca),::hx::paccDynamic)) );
HXLINE(  54)		this->vel = ( ( ::hxlr::math::geom::Point)(_object->__Field(HX_("velocity",1d,02,fe,1e),::hx::paccDynamic)) );
HXLINE(  55)		this->friction = ( (Float)(_object->__Field(HX_("friction",fa,78,c9,97),::hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(ContactPoint_obj,deserialize,(void))


::hx::ObjectPtr< ContactPoint_obj > ContactPoint_obj::__new(::hx::Null< Float >  __o__x,::hx::Null< Float >  __o__y,::hx::Null< Float >  __o__friction) {
	::hx::ObjectPtr< ContactPoint_obj > __this = new ContactPoint_obj();
	__this->__construct(__o__x,__o__y,__o__friction);
	return __this;
}

::hx::ObjectPtr< ContactPoint_obj > ContactPoint_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o__x,::hx::Null< Float >  __o__y,::hx::Null< Float >  __o__friction) {
	ContactPoint_obj *__this = (ContactPoint_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ContactPoint_obj), true, "hxlr.rider.ContactPoint"));
	*(void **)__this = ContactPoint_obj::_hx_vtable;
	__this->__construct(__o__x,__o__y,__o__friction);
	return __this;
}

ContactPoint_obj::ContactPoint_obj()
{
}

void ContactPoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ContactPoint);
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(vel,"vel");
	HX_MARK_MEMBER_NAME(dir,"dir");
	HX_MARK_MEMBER_NAME(gravity,"gravity");
	HX_MARK_MEMBER_NAME(friction,"friction");
	HX_MARK_END_CLASS();
}

void ContactPoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(vel,"vel");
	HX_VISIT_MEMBER_NAME(dir,"dir");
	HX_VISIT_MEMBER_NAME(gravity,"gravity");
	HX_VISIT_MEMBER_NAME(friction,"friction");
}

::hx::Val ContactPoint_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return ::hx::Val( pos ); }
		if (HX_FIELD_EQ(inName,"vel") ) { return ::hx::Val( vel ); }
		if (HX_FIELD_EQ(inName,"dir") ) { return ::hx::Val( dir ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gravity") ) { return ::hx::Val( gravity ); }
		if (HX_FIELD_EQ(inName,"iterate") ) { return ::hx::Val( iterate_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"friction") ) { return ::hx::Val( friction ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"serialize") ) { return ::hx::Val( serialize_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"deserialize") ) { return ::hx::Val( deserialize_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ContactPoint_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast<  ::hxlr::math::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vel") ) { vel=inValue.Cast<  ::hxlr::math::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dir") ) { dir=inValue.Cast<  ::hxlr::math::geom::Point >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gravity") ) { gravity=inValue.Cast<  ::hxlr::math::geom::Point >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"friction") ) { friction=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ContactPoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pos",94,5d,55,00));
	outFields->push(HX_("vel",5d,e2,59,00));
	outFields->push(HX_("dir",4d,3d,4c,00));
	outFields->push(HX_("gravity",4e,6e,ff,77));
	outFields->push(HX_("friction",fa,78,c9,97));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ContactPoint_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hxlr::math::geom::Point */ ,(int)offsetof(ContactPoint_obj,pos),HX_("pos",94,5d,55,00)},
	{::hx::fsObject /*  ::hxlr::math::geom::Point */ ,(int)offsetof(ContactPoint_obj,vel),HX_("vel",5d,e2,59,00)},
	{::hx::fsObject /*  ::hxlr::math::geom::Point */ ,(int)offsetof(ContactPoint_obj,dir),HX_("dir",4d,3d,4c,00)},
	{::hx::fsObject /*  ::hxlr::math::geom::Point */ ,(int)offsetof(ContactPoint_obj,gravity),HX_("gravity",4e,6e,ff,77)},
	{::hx::fsFloat,(int)offsetof(ContactPoint_obj,friction),HX_("friction",fa,78,c9,97)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ContactPoint_obj_sStaticStorageInfo = 0;
#endif

static ::String ContactPoint_obj_sMemberFields[] = {
	HX_("pos",94,5d,55,00),
	HX_("vel",5d,e2,59,00),
	HX_("dir",4d,3d,4c,00),
	HX_("gravity",4e,6e,ff,77),
	HX_("friction",fa,78,c9,97),
	HX_("iterate",fa,79,d0,e2),
	HX_("serialize",e0,5d,f2,f4),
	HX_("deserialize",3f,8e,35,29),
	::String(null()) };

::hx::Class ContactPoint_obj::__mClass;

void ContactPoint_obj::__register()
{
	ContactPoint_obj _hx_dummy;
	ContactPoint_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxlr.rider.ContactPoint",fc,53,26,0c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ContactPoint_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ContactPoint_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ContactPoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ContactPoint_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxlr
} // end namespace rider
