// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_hxlr_math_geom_Point
#include <hxlr/math/geom/Point.h>
#endif
#ifndef INCLUDED_hxlr_rider_AirPoint
#include <hxlr/rider/AirPoint.h>
#endif
#ifndef INCLUDED_hxlr_rider_ContactPoint
#include <hxlr/rider/ContactPoint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_49c0531cd81f1b43_14_new,"hxlr.rider.AirPoint","new",0x1e40b3c4,"hxlr.rider.AirPoint.new","hxlr/rider/AirPoint.hx",14,0x0d194caa)
HX_LOCAL_STACK_FRAME(_hx_pos_49c0531cd81f1b43_23_iterate,"hxlr.rider.AirPoint","iterate",0xf07cdf5e,"hxlr.rider.AirPoint.iterate","hxlr/rider/AirPoint.hx",23,0x0d194caa)
namespace hxlr{
namespace rider{

void AirPoint_obj::__construct(Float _x,Float _y,Float _af){
            	HX_STACKFRAME(&_hx_pos_49c0531cd81f1b43_14_new)
HXLINE(  16)		super::__construct(_x,_y,null());
HXLINE(  18)		this->friction = _af;
            	}

Dynamic AirPoint_obj::__CreateEmpty() { return new AirPoint_obj; }

void *AirPoint_obj::_hx_vtable = 0;

Dynamic AirPoint_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AirPoint_obj > _hx_result = new AirPoint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool AirPoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x404443b0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x404443b0;
	} else {
		return inClassId==(int)0x723a3b6a;
	}
}

void AirPoint_obj::iterate( ::hxlr::math::geom::Point _gravity){
            	HX_STACKFRAME(&_hx_pos_49c0531cd81f1b43_23_iterate)
HXLINE(  25)		 ::hxlr::math::geom::Point g;
HXDLIN(  25)		if (::hx::IsNull( _gravity )) {
HXLINE(  25)			g = this->gravity;
            		}
            		else {
HXLINE(  25)			g = _gravity;
            		}
HXLINE(  27)		this->dir->x = (((this->pos->x - this->vel->x) * this->friction) + g->x);
HXLINE(  28)		this->dir->y = (((this->pos->y - this->vel->y) * this->friction) + g->y);
HXLINE(  30)		this->vel = this->pos->clone();
HXLINE(  32)		this->pos = this->pos->add(this->dir);
            	}



::hx::ObjectPtr< AirPoint_obj > AirPoint_obj::__new(Float _x,Float _y,Float _af) {
	::hx::ObjectPtr< AirPoint_obj > __this = new AirPoint_obj();
	__this->__construct(_x,_y,_af);
	return __this;
}

::hx::ObjectPtr< AirPoint_obj > AirPoint_obj::__alloc(::hx::Ctx *_hx_ctx,Float _x,Float _y,Float _af) {
	AirPoint_obj *__this = (AirPoint_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AirPoint_obj), true, "hxlr.rider.AirPoint"));
	*(void **)__this = AirPoint_obj::_hx_vtable;
	__this->__construct(_x,_y,_af);
	return __this;
}

AirPoint_obj::AirPoint_obj()
{
}

::hx::Val AirPoint_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"iterate") ) { return ::hx::Val( iterate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *AirPoint_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *AirPoint_obj_sStaticStorageInfo = 0;
#endif

static ::String AirPoint_obj_sMemberFields[] = {
	HX_("iterate",fa,79,d0,e2),
	::String(null()) };

::hx::Class AirPoint_obj::__mClass;

void AirPoint_obj::__register()
{
	AirPoint_obj _hx_dummy;
	AirPoint_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxlr.rider.AirPoint",d2,c1,6a,42);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AirPoint_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AirPoint_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AirPoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AirPoint_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxlr
} // end namespace rider
