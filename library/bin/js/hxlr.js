// Generated by Haxe 4.1.5
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
});
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var hxlr_Constants = function() {
};
hxlr_Constants.__name__ = true;
hxlr_Constants.defaultRider = function() {
	var rider = { scale : 0.5, x_grav : hxlr_Constants.x_gravity, y_grav : hxlr_Constants.y_gravity, x_vel : hxlr_Constants.x_velocity, y_vel : hxlr_Constants.y_velocity, camera : 4, contactPoints : [{ x : 0, y : 0, fr : 0.8},{ x : 0, y : 10, fr : 0},{ x : 30, y : 10, fr : 0},{ x : 35, y : 0, fr : 0},{ x : 10, y : 0, fr : 0.8},{ x : 10, y : -11, fr : 0.8},{ x : 23, y : -10, fr : 0.1},{ x : 23, y : -10, fr : 0.1},{ x : 20, y : 10, fr : 0},{ x : 20, y : 10, fr : 0}], scarfPoints : [{ x : 7, y : -10, fr : 0.9},{ x : 3, y : -10, fr : 0.9},{ x : 0, y : -10, fr : 0.9},{ x : -4, y : -10, fr : 0.9},{ x : -7, y : -10, fr : 0.9},{ x : -11, y : -10, fr : 0.9}], bones : [{ a : 0, b : 1, type : "STANDARD", crashable : false},{ a : 1, b : 2, type : "STANDARD", crashable : false},{ a : 2, b : 3, type : "STANDARD", crashable : false},{ a : 3, b : 0, type : "STANDARD", crashable : false},{ a : 0, b : 2, type : "STANDARD", crashable : false},{ a : 3, b : 1, type : "STANDARD", crashable : false},{ a : 0, b : 4, type : "STANDARD", crashable : true},{ a : 1, b : 4, type : "STANDARD", crashable : true},{ a : 2, b : 4, type : "STANDARD", crashable : true},{ a : 5, b : 4, type : "STANDARD", crashable : false},{ a : 5, b : 6, type : "STANDARD", crashable : false},{ a : 5, b : 7, type : "STANDARD", crashable : false},{ a : 4, b : 8, type : "STANDARD", crashable : false},{ a : 4, b : 9, type : "STANDARD", crashable : false},{ a : 5, b : 7, type : "STANDARD", crashable : false},{ a : 5, b : 0, type : "STANDARD", crashable : true},{ a : 3, b : 6, type : "STANDARD", crashable : true},{ a : 3, b : 7, type : "STANDARD", crashable : true},{ a : 8, b : 2, type : "STANDARD", crashable : true},{ a : 9, b : 2, type : "STANDARD", crashable : true},{ a : 5, b : 8, type : "REPELL", crashable : false},{ a : 5, b : 9, type : "REPELL", crashable : false}], limits : [{ point_a : 3, point_b : 0, point_c : 1, point_d : 0, threshold : 0, lessThan : true}], scarfAnchor : 5, colors : [13763074,16777215,13763074,16777215,13763074,16777215,13763074,16777215,13763074,16777215,13763074]};
	return rider;
};
var hxlr_engine_Cell = function(_info) {
	this.info = _info;
	this.allLines = [];
	this.collidable = [];
	this.intangible = [];
};
hxlr_engine_Cell.__name__ = true;
hxlr_engine_Cell.getInfo = function(_x,_y) {
	var info = { x : Math.floor(_x / 14) | 0, y : Math.floor(_y / 14) | 0, gx : _x - 14 * Math.floor(_x / 14), gy : _y - 14 * Math.floor(_y / 14)};
	info.key = "x" + info.x + "y" + info.y;
	return info;
};
hxlr_engine_Cell.prototype = {
	addLine: function(_line) {
		if(this.allLines.indexOf(_line) != -1) {
			return;
		}
		this.allLines.push(_line);
		if(_line.tangible) {
			this.collidable[_line.id] = _line;
		} else {
			this.intangible[_line.id] = _line;
		}
		if(hxlr_engine_Cell.cellList.indexOf(this) == -1) {
			hxlr_engine_Cell.cellList.push(this);
		}
	}
	,removeLine: function(_line) {
		if(this.allLines.indexOf(_line) == -1) {
			return;
		}
		HxOverrides.remove(this.allLines,_line);
		if(_line.tangible) {
			HxOverrides.remove(this.collidable,_line);
		} else {
			HxOverrides.remove(this.intangible,_line);
		}
		if(this.allLines.length == 0) {
			HxOverrides.remove(hxlr_engine_Cell.cellList,this);
		}
	}
};
var hxlr_engine_Grid = function() {
	this.subTypeCount = [];
	this.lineIDCount = 0;
	this.lineCount = 0;
	hxlr_engine_Grid.registry = new haxe_ds_StringMap();
	hxlr_engine_Grid.lines = [];
};
hxlr_engine_Grid.__name__ = true;
hxlr_engine_Grid.prototype = {
	register: function(_line) {
		this.addLine(_line);
		var start = hxlr_engine_Cell.getInfo(_line.start.x,_line.start.y);
		var end = hxlr_engine_Cell.getInfo(_line.end.x,_line.end.y);
		var right = _line.dx > 0 ? end.x : start.x;
		var left = _line.dx > 0 ? start.x : end.x;
		var bottom = _line.dy > 0 ? end.y : start.y;
		var top = _line.dy > 0 ? start.y : end.y;
		this.storeLine(_line,start);
		if(_line.dx == 0 && _line.dy == 0 || left == right && top == bottom) {
			return;
		}
		var x = _line.start.x;
		var y = _line.start.y;
		var invDx = 1 / _line.dx;
		var invDy = 1 / _line.dy;
		var difX;
		var difY;
		while(true) {
			if(start.x < 0) {
				difX = _line.dx > 0 ? 14 + start.gx : -14 - start.gx;
			} else {
				difX = _line.dx > 0 ? 14 - start.gx : -(start.gx + 1);
			}
			if(start.y < 0) {
				difY = _line.dy > 0 ? 14 + start.gy : -14 - start.gy;
			} else {
				difY = _line.dy > 0 ? 14 - start.gy : -(start.gy + 1);
			}
			if(_line.dx == 0) {
				y += difY;
			} else if(_line.dy == 0) {
				x += difX;
			} else {
				var step = y + _line.dy * difX * invDx;
				if(Math.abs(step - y) < Math.abs(difY)) {
					x += difX;
					y = step;
				} else if(Math.abs(step - y) == Math.abs(difY)) {
					x += difX;
					y += difY;
				} else {
					x += _line.dx * difY * invDy;
					y += difY;
				}
			}
			start = hxlr_engine_Cell.getInfo(x,y);
			if(start.x >= left && start.x <= right && start.y >= top && start.y <= bottom) {
				this.storeLine(_line,start);
				continue;
			}
			return;
		}
	}
	,addLine: function(_line) {
		if(_line.id == null) {
			_line.id = this.lineIDCount;
		}
		hxlr_engine_Grid.lines[_line.id] = _line;
		++this.lineCount;
		++this.lineIDCount;
		++this.subTypeCount[_line.type];
	}
	,storeLine: function(_line,_info) {
		if(hxlr_engine_Grid.registry.h[_info.key] == null) {
			var this1 = hxlr_engine_Grid.registry;
			var k = _info.key;
			var v = new hxlr_engine_Cell(_info);
			this1.h[k] = v;
		}
		hxlr_engine_Grid.registry.h[_info.key].addLine(_line);
		_line.keyList.push(_info.key);
	}
	,deleteTrack: function() {
		var _g = 0;
		var _g1 = hxlr_engine_Grid.lines;
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			this.unregister(line);
		}
	}
	,unregister: function(_line) {
		if(_line == null) {
			return;
		}
		var _g = 0;
		var _g1 = _line.keyList;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			hxlr_engine_Grid.registry.h[key].removeLine(_line);
		}
		--this.lineCount;
		--this.subTypeCount[_line.type];
		hxlr_engine_Grid.lines[_line.id] = null;
	}
};
var hxlr_export_JSONFile = function() { };
hxlr_export_JSONFile.__name__ = true;
hxlr_export_JSONFile.save = function() {
	var lines = [];
	var save = { lines : lines};
	var json = JSON.stringify(save);
	return json;
};
var hxlr_file_AMF0Reader = function(_sol) {
	this.object = { };
	this.pos = 0;
	this.data = _sol;
	var pos = this;
	this.header = this.data.b[this.pos] << 8 | this.data.b[pos.pos += 1];
	var pos = this;
	var pos1 = this;
	var pos2 = this;
	var pos3 = this;
	this.size = this.data.b[pos.pos += 1] << 24 | this.data.b[pos1.pos += 1] << 16 | this.data.b[pos2.pos += 1] << 8 | this.data.b[pos3.pos += 1];
	if(this.size > this.data.length) {
		haxe_Log.trace("Internal size value greater than file size!",{ fileName : "src/hxlr/file/AMF0Reader.hx", lineNumber : 33, className : "hxlr.file.AMF0Reader", methodName : "new"});
		return;
	}
	var tcso = this;
	var tcso1 = this.data.getString(tcso.pos += 1,4);
	if(tcso1.toUpperCase() != "TCSO") {
		haxe_Log.trace("Not a valid .sol/AMF0 file!",{ fileName : "src/hxlr/file/AMF0Reader.hx", lineNumber : 39, className : "hxlr.file.AMF0Reader", methodName : "new", customParams : [tcso1]});
		return;
	}
	this.pos += 11;
	var saveNameSize = this.data.b[this.pos];
	var saveNameField = this;
	var saveNameField1 = this.data.getString(saveNameField.pos += 1,saveNameSize);
	if(saveNameField1 != "savedLines") {
		haxe_Log.trace(saveNameSize,{ fileName : "src/hxlr/file/AMF0Reader.hx", lineNumber : 47, className : "hxlr.file.AMF0Reader", methodName : "new", customParams : [saveNameField1]});
		haxe_Log.trace("Unable to locate savedLines!",{ fileName : "src/hxlr/file/AMF0Reader.hx", lineNumber : 48, className : "hxlr.file.AMF0Reader", methodName : "new"});
		return;
	}
	this.pos += saveNameSize + 4;
	var pos = this;
	var trackListNameSize = this.data.b[this.pos] << 8 | this.data.b[pos.pos += 1];
	var trackListField = this;
	var trackListField1 = this.data.getString(trackListField.pos += 1,trackListNameSize);
	if(trackListField1 != "trackList") {
		haxe_Log.trace(trackListNameSize,{ fileName : "src/hxlr/file/AMF0Reader.hx", lineNumber : 57, className : "hxlr.file.AMF0Reader", methodName : "new", customParams : [trackListField1]});
		haxe_Log.trace("Unable to locate trackList!",{ fileName : "src/hxlr/file/AMF0Reader.hx", lineNumber : 58, className : "hxlr.file.AMF0Reader", methodName : "new"});
		return;
	}
	this.loadedSOL = { trackList : []};
	var pos = this;
	this.recursiveRead(this.data.b[pos.pos += trackListNameSize]);
};
hxlr_file_AMF0Reader.__name__ = true;
hxlr_file_AMF0Reader.prototype = {
	recursiveRead: function(_code) {
		var tmp = _code == 8;
	}
	,loadSOLTrack: function(_index) {
		return { };
	}
};
var hxlr_lines_LineBase = function(_start,_end,_shift,_lim) {
	if(_lim == null) {
		_lim = 0;
	}
	this.limValue = 0;
	this.limEnd = 0;
	this.limStart = 0;
	this.limType = 0;
	this.zone = 10;
	this.tangible = false;
	this.start = _start;
	this.end = _end;
	this.gfxEnd = new hxlr_math_geom_Point(this.end.x - this.start.x,this.end.y - this.start.y);
	this.shifted = _shift;
	this.keyList = [];
	this.calculateConstants();
	this.setLim(_lim);
};
hxlr_lines_LineBase.__name__ = true;
hxlr_lines_LineBase.prototype = {
	calculateConstants: function() {
		this.dx = this.end.x - this.start.x;
		this.dy = this.end.y - this.start.y;
		this.C = this.dy * this.start.x - this.dx * this.start.y;
		var _loc2 = Math.pow(this.dx,2) + Math.pow(this.dy,2);
		this.invSqrDistance = 1 / _loc2;
		this.distance = Math.sqrt(_loc2);
		this.invDistance = 1 / this.distance;
		this.nx = this.dy * this.invDistance * (this.shifted ? 1 : -1);
		this.ny = this.dx * this.invDistance * (this.shifted ? -1 : 1);
		this.limValue = Math.min(0.25,this.zone / this.distance);
	}
	,setLim: function(_limMode) {
		switch(_limMode) {
		case 0:
			this.limStart = 0;
			this.limEnd = 1;
			break;
		case 1:
			this.limStart = -this.limValue;
			this.limEnd = 1;
			break;
		case 2:
			this.limStart = 0;
			this.limEnd = 1 + this.limValue;
			break;
		case 3:
			this.limStart = -this.limValue;
			this.limEnd = 1 + this.limValue;
			break;
		}
		this.limType = _limMode;
	}
	,collide: function(_point) {
	}
	,toSaveObject: function() {
		var save;
		switch(this.limType) {
		case 1:case 3:
			save = true;
			break;
		case 0:case 2:
			save = false;
			break;
		default:
			save = false;
		}
		var save1;
		switch(this.limType) {
		case 0:case 1:
			save1 = false;
			break;
		case 2:case 3:
			save1 = true;
			break;
		default:
			save1 = false;
		}
		var save2 = { id : this.id, type : this.type, x1 : this.start.x, y1 : this.start.y, x2 : this.end.x, y2 : this.end.y, flipped : this.shifted, leftExtended : save, rightExtended : save1};
		return save2;
	}
};
var hxlr_lines_Accel = function(_start,_end,_shift) {
	this.accConst = 0.1;
	hxlr_lines_LineBase.call(this,_start,_end,_shift);
	this.type = 1;
	this.tangible = true;
};
hxlr_lines_Accel.__name__ = true;
hxlr_lines_Accel.__super__ = hxlr_lines_LineBase;
hxlr_lines_Accel.prototype = $extend(hxlr_lines_LineBase.prototype,{
	calculateConstants: function() {
		hxlr_lines_LineBase.prototype.calculateConstants.call(this);
		this.accx = this.ny * this.accConst * (this.shifted ? 1 : -1);
		this.accy = this.nx * this.accConst * (this.shifted ? -1 : 1);
	}
	,collide: function(_point) {
		var _loc5 = _point.pos.x - this.start.x;
		var _loc6 = _point.pos.y - this.start.y;
		var _loc4 = this.nx * _loc5 + this.ny * _loc6;
		var _loc7 = (_loc5 * this.dx + _loc6 * this.dy) * this.invSqrDistance;
		if(_point.dir.x * this.nx + _point.dir.y * this.ny > 0) {
			if(_loc4 > 0 && _loc4 < this.zone && _loc7 >= this.limStart && _loc7 <= this.limEnd) {
				_point.pos.x -= _loc4 * this.nx;
				_point.pos.y -= _loc4 * this.ny;
				_point.vel.x = _point.vel.x + this.ny * _point.friction * _loc4 * (_point.vel.x < _point.pos.x ? 1 : -1) + this.accx;
				_point.vel.y = _point.vel.y - this.nx * _point.friction * _loc4 * (_point.vel.y < _point.pos.y ? -1 : 1) + this.accy;
			}
		}
	}
});
var hxlr_lines_Floor = function(_start,_end,_shift) {
	hxlr_lines_LineBase.call(this,_start,_end,_shift);
	this.type = 0;
	this.tangible = true;
};
hxlr_lines_Floor.__name__ = true;
hxlr_lines_Floor.__super__ = hxlr_lines_LineBase;
hxlr_lines_Floor.prototype = $extend(hxlr_lines_LineBase.prototype,{
	collide: function(_point) {
		var _loc5 = _point.pos.x - this.start.x;
		var _loc6 = _point.pos.y - this.start.y;
		var _loc4 = this.nx * _loc5 + this.ny * _loc6;
		var _loc7 = (_loc5 * this.dx + _loc6 * this.dy) * this.invSqrDistance;
		if(_point.dir.x * this.nx + _point.dir.y * this.ny > 0) {
			if(_loc4 > 0 && _loc4 < this.zone && _loc7 >= this.limStart && _loc7 <= this.limEnd) {
				_point.pos.x -= _loc4 * this.nx;
				_point.pos.y -= _loc4 * this.ny;
				_point.vel.x += this.ny * _point.friction * _loc4 * (_point.vel.x < _point.pos.x ? 1 : -1);
				_point.vel.y -= this.nx * _point.friction * _loc4 * (_point.vel.y < _point.pos.y ? -1 : 1);
			}
		}
	}
});
var hxlr_lines_Scenery = function(_start,_end,_shift) {
	hxlr_lines_LineBase.call(this,_start,_end,_shift);
	this.type = 2;
};
hxlr_lines_Scenery.__name__ = true;
hxlr_lines_Scenery.__super__ = hxlr_lines_LineBase;
hxlr_lines_Scenery.prototype = $extend(hxlr_lines_LineBase.prototype,{
});
var hxlr_lines_Undefined = function(_start,_end,_shift,_lim) {
	if(_lim == null) {
		_lim = 0;
	}
	hxlr_lines_LineBase.call(this,_start,_end,_shift,_lim);
};
hxlr_lines_Undefined.__name__ = true;
hxlr_lines_Undefined.__super__ = hxlr_lines_LineBase;
hxlr_lines_Undefined.prototype = $extend(hxlr_lines_LineBase.prototype,{
});
var hxlr_math_geom_Line = function(_start,_end) {
};
hxlr_math_geom_Line.__name__ = true;
var hxlr_math_geom_Point = function(_x,_y) {
	if(_y == null) {
		_y = 0.0;
	}
	if(_x == null) {
		_x = 0.0;
	}
	this.x = _x;
	this.y = _y;
};
hxlr_math_geom_Point.__name__ = true;
hxlr_math_geom_Point.prototype = {
	clone: function() {
		return new hxlr_math_geom_Point(this.x,this.y);
	}
	,add: function(_point) {
		this.x += _point.x;
		this.y += _point.y;
		return this;
	}
	,sub: function(_point) {
		this.x -= _point.x;
		this.y -= _point.y;
		return this;
	}
};
var hxlr_rider_ContactPoint = function(_x,_y,_friction) {
	if(_friction == null) {
		_friction = 0.0;
	}
	if(_y == null) {
		_y = 0.0;
	}
	if(_x == null) {
		_x = 0.0;
	}
	this.pos = new hxlr_math_geom_Point(_x,_y);
	this.dir = new hxlr_math_geom_Point();
	this.vel = new hxlr_math_geom_Point();
	this.friction = _friction;
};
hxlr_rider_ContactPoint.__name__ = true;
hxlr_rider_ContactPoint.prototype = {
	iterate: function(_gravity) {
		var g = _gravity == null ? this.gravity : _gravity;
		this.dir.x = this.pos.x - this.vel.x + g.x;
		this.dir.y = this.pos.y - this.vel.y + g.y;
		this.vel = this.pos.clone();
		this.pos = this.pos.add(this.dir);
	}
	,serialize: function() {
		var object = { position : this.pos, velocity : this.vel, friction : this.friction};
		return object;
	}
	,deserialize: function(_object) {
		this.pos = _object.position;
		this.vel = _object.velocity;
		this.friction = _object.friction;
	}
};
var hxlr_rider_AirPoint = function(_x,_y,_af) {
	hxlr_rider_ContactPoint.call(this,_x,_y);
	this.friction = _af;
};
hxlr_rider_AirPoint.__name__ = true;
hxlr_rider_AirPoint.__super__ = hxlr_rider_ContactPoint;
hxlr_rider_AirPoint.prototype = $extend(hxlr_rider_ContactPoint.prototype,{
	iterate: function(_gravity) {
		var g = _gravity == null ? this.gravity : _gravity;
		this.dir.x = (this.pos.x - this.vel.x) * this.friction + g.x;
		this.dir.y = (this.pos.y - this.vel.y) * this.friction + g.y;
		this.vel = this.pos.clone();
		this.pos = this.pos.add(this.dir);
	}
});
var hxlr_rider_RiderBase = function(_struct,_start,_name) {
	this.enabled = true;
	this.invincible = false;
	this.crashed = false;
	this.struct = _struct;
	this.startPos = _start;
	this.startVel = new hxlr_math_geom_Point(this.struct.x_vel,this.struct.y_vel);
	this.gravity = new hxlr_math_geom_Point(this.struct.x_grav,this.struct.y_grav);
	this.name = _name;
	this.init();
};
hxlr_rider_RiderBase.__name__ = true;
hxlr_rider_RiderBase.prototype = {
	init: function() {
		this.contactPoints = [];
		var _g = 0;
		var _g1 = this.struct.contactPoints;
		while(_g < _g1.length) {
			var dot = _g1[_g];
			++_g;
			this.contactPoints.push(new hxlr_rider_ContactPoint(dot.x,dot.y,dot.fr));
		}
		this.airPoints = [];
		var _g = 0;
		var _g1 = this.struct.scarfPoints;
		while(_g < _g1.length) {
			var dot = _g1[_g];
			++_g;
			this.airPoints.push(new hxlr_rider_AirPoint(dot.x,dot.y,dot.fr));
		}
		var _g = 0;
		var _g1 = this.contactPoints;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			point.pos.x *= this.struct.scale;
			point.pos.y *= this.struct.scale;
			point.pos.x += this.startPos.x;
			point.pos.y += this.startPos.y;
			point.vel.x = point.pos.x - this.startVel.x;
			point.vel.y = point.pos.y;
		}
		var _g = 0;
		var _g1 = this.airPoints;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			point.pos.x *= this.struct.scale;
			point.pos.y *= this.struct.scale;
			point.pos.x += this.startPos.x;
			point.pos.y += this.startPos.y;
			point.vel.x = point.pos.x - this.startVel.x;
			point.vel.y = point.pos.y;
		}
		this.constraints = [];
		var _g = 0;
		var _g1 = this.struct.bones;
		while(_g < _g1.length) {
			var edge = _g1[_g];
			++_g;
			var stick = new hxlr_rider_Stick(this.contactPoints[edge.a],this.contactPoints[edge.b],edge.type,this);
			stick.crashable = edge.crashable;
			this.constraints.push(stick);
		}
		this.scarves = [];
		var _g = 0;
		var _g1 = this.airPoints.length;
		while(_g < _g1) {
			var point = _g++;
			if(this.airPoints[point + 1] == null) {
				break;
			}
			this.scarves.push(new hxlr_rider_Stick(this.airPoints[point],this.airPoints[point + 1],"SCARF",this));
		}
		this.scarves.unshift(new hxlr_rider_Stick(this.contactPoints[this.struct.scarfAnchor],this.airPoints[0],"SCARF",this));
		this.limits = this.struct.limits;
		this.focusPoint = this.contactPoints[this.struct.camera];
		this.set_crashed(false);
	}
	,reset: function() {
	}
	,step: function() {
	}
	,iterate: function() {
	}
	,checkLimits: function() {
	}
	,constrain: function() {
	}
	,constrainScarf: function() {
	}
	,collide: function() {
		var _g = 0;
		var _g1 = this.contactPoints;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			var gridPos = hxlr_engine_Cell.getInfo(point.pos.x,point.pos.y);
			var _g2 = -1;
			while(_g2 < 2) {
				var _x = _g2++;
				var _g3 = -1;
				while(_g3 < 2) {
					var _y = _g3++;
					var key = "x" + (gridPos.x + _x) + "y" + (gridPos.y + _y);
					if(hxlr_engine_Grid.registry.h[key] == null) {
						continue;
					} else {
						var register = hxlr_engine_Grid.registry.h[key];
						var _g4 = 0;
						var _g5 = register.collidable;
						while(_g4 < _g5.length) {
							var line = _g5[_g4];
							++_g4;
							if(line == null) {
								continue;
							}
							line.collide(point);
						}
					}
				}
			}
		}
	}
	,renderRider: function() {
	}
	,set_crashed: function(_value) {
		if(this.invincible) {
			return this.crashed = null;
		}
		return this.crashed = _value;
	}
};
var hxlr_rider_Stick = function(_a,_b,_type,_rider) {
	this.crashable = false;
	this.broken = false;
	this.breakable = false;
	this.enabled = true;
	this.a = _a;
	this.b = _b;
	this.set_type(_type);
	this.rider = _rider;
	this.endurance = 0.057 * this.restLength * 0.5;
};
hxlr_rider_Stick.__name__ = true;
hxlr_rider_Stick.prototype = {
	satisfy: function(_crashed) {
		if(!this.enabled) {
			return;
		}
		var result = this.constrain(_crashed);
		if(this.breakable) {
			this.broken = result;
		}
		if(this.crashable) {
			this.rider.set_crashed(result);
		}
	}
	,noConstrain: function(_crashed) {
		return _crashed;
	}
	,standard: function(_crashed) {
		var xDist = this.a.pos.x - this.b.pos.x;
		var yDist = this.a.pos.y - this.b.pos.y;
		var dist = Math.sqrt(xDist * xDist + yDist * yDist);
		var adjust = 0;
		if(dist != 0) {
			adjust = (dist - this.restLength) / dist * 0.5;
		}
		if(this.crashable || this.breakable) {
			if(!this.rider.invincible) {
				if(adjust > this.endurance || _crashed || this.broken) {
					return true;
				}
			}
		}
		var xAdjust = xDist * adjust;
		var yAdjust = yDist * adjust;
		this.a.pos.x -= xAdjust;
		this.a.pos.y -= yAdjust;
		this.b.pos.x += xAdjust;
		this.b.pos.y += yAdjust;
		return _crashed;
	}
	,repell: function(_crashed) {
		var xDist = this.a.pos.x - this.b.pos.x;
		var yDist = this.a.pos.y - this.b.pos.y;
		var dist = Math.sqrt(xDist * xDist + yDist * yDist);
		if(dist < this.restLength) {
			var adjust = 0;
			if(dist != 0) {
				adjust = (dist - this.restLength) / dist * 0.5;
			}
			if(this.crashable || this.breakable) {
				if(!this.rider.invincible) {
					if(adjust > this.endurance || _crashed || this.broken) {
						return true;
					}
				}
			}
			var xAdjust = xDist * adjust;
			var yAdjust = yDist * adjust;
			this.a.pos.x -= xAdjust;
			this.a.pos.y -= yAdjust;
			this.b.pos.x += xAdjust;
			this.b.pos.y += yAdjust;
		}
		return _crashed;
	}
	,attract: function(_crashed) {
		var xDist = this.a.pos.x - this.b.pos.x;
		var yDist = this.a.pos.y - this.b.pos.y;
		var dist = Math.sqrt(xDist * xDist + yDist * yDist);
		if(dist > this.restLength) {
			var adjust = 0;
			if(dist != 0) {
				adjust = (dist - this.restLength) / dist * 0.5;
			}
			if(this.crashable || this.breakable) {
				if(!this.rider.invincible) {
					if(adjust > this.endurance || _crashed || this.broken) {
						return true;
					}
				}
			}
			var xAdjust = xDist * adjust;
			var yAdjust = yDist * adjust;
			this.a.pos.x -= xAdjust;
			this.a.pos.y -= yAdjust;
			this.b.pos.x += xAdjust;
			this.b.pos.y += yAdjust;
		}
		return _crashed;
	}
	,scarf: function(_crashed) {
		var xDist = this.a.pos.x - this.b.pos.x;
		var yDist = this.a.pos.y - this.b.pos.y;
		var dist = Math.sqrt(xDist * xDist + yDist * yDist);
		var adjust = null;
		if(dist == 0) {
			adjust = 0;
		} else {
			adjust = (dist - this.restLength) / dist * 0.5;
		}
		var xAdjust = xDist * adjust;
		var yAdjust = yDist * adjust;
		this.b.pos.x += xAdjust;
		this.b.pos.y += yAdjust;
		return _crashed;
	}
	,set_type: function(value) {
		this.setRestLength();
		if(value == "REPELL" || value == "ATTRACT") {
			this.restLength *= 0.5;
		}
		switch(value) {
		case "REPELL":
			this.constrain = $bind(this,this.repell);
			break;
		case "SCARF":
			this.constrain = $bind(this,this.scarf);
			break;
		case "STANDARD":
			this.constrain = $bind(this,this.standard);
			break;
		default:
			this.constrain = $bind(this,this.noConstrain);
		}
		return this.type = value;
	}
	,setRestLength: function() {
		var x = this.a.pos.x - this.b.pos.x;
		var y = this.a.pos.y - this.b.pos.y;
		this.restLength = Math.sqrt(x * x + y * y);
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
hxlr_Constants.minLineSize = 10;
hxlr_Constants.minSnapDistance = 10;
hxlr_Constants.x_gravity = 0;
hxlr_Constants.y_gravity = 0.175;
hxlr_Constants.x_velocity = 0.4;
hxlr_Constants.y_velocity = 0;
hxlr_engine_Cell.size = 14;
hxlr_engine_Cell.cellList = [];
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
