// Generated by Haxe 4.1.5
package hxlr.engine;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Grid extends haxe.lang.HxObject
{
	static
	{
		//line 14 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		hxlr.engine.Grid.lineCount = 0;
		//line 15 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		hxlr.engine.Grid.lineIDCount = 0;
		//line 16 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		hxlr.engine.Grid.subTypeCount = new haxe.root.Array<java.lang.Object>();
	}
	
	public Grid(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Grid()
	{
		//line 21 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		hxlr.engine.Grid.__hx_ctor_hxlr_engine_Grid(this);
	}
	
	
	protected static void __hx_ctor_hxlr_engine_Grid(hxlr.engine.Grid __hx_this)
	{
		//line 23 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		hxlr.engine.Grid.registry = new haxe.ds.StringMap<hxlr.engine.Cell>();
		//line 24 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		hxlr.engine.Grid.lines = new haxe.root.Array<hxlr.lines.LineObject>();
	}
	
	
	public static int lineCount;
	
	public static int lineIDCount;
	
	public static haxe.root.Array<java.lang.Object> subTypeCount;
	
	public static haxe.ds.StringMap<hxlr.engine.Cell> registry;
	
	public static haxe.root.Array<hxlr.lines.LineObject> lines;
	
	public static void register(hxlr.lines.LineObject _line)
	{
		//line 29 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		hxlr.engine.Grid.addLine(_line);
		//line 31 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		java.lang.Object start = hxlr.engine.Cell.getInfo(_line.start.x, _line.start.y);
		//line 32 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		java.lang.Object end = hxlr.engine.Cell.getInfo(_line.end.x, _line.end.y);
		//line 34 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		int right = ( (( _line.dx > 0 )) ? (((int) (haxe.lang.Runtime.getField_f(end, "x", true)) )) : (((int) (haxe.lang.Runtime.getField_f(start, "x", true)) )) );
		//line 35 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		int left = ( (( _line.dx > 0 )) ? (((int) (haxe.lang.Runtime.getField_f(start, "x", true)) )) : (((int) (haxe.lang.Runtime.getField_f(end, "x", true)) )) );
		//line 36 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		int bottom = ( (( _line.dy > 0 )) ? (((int) (haxe.lang.Runtime.getField_f(end, "y", true)) )) : (((int) (haxe.lang.Runtime.getField_f(start, "y", true)) )) );
		//line 37 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		int top = ( (( _line.dy > 0 )) ? (((int) (haxe.lang.Runtime.getField_f(start, "y", true)) )) : (((int) (haxe.lang.Runtime.getField_f(end, "y", true)) )) );
		//line 39 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		hxlr.engine.Grid.storeLine(_line, start);
		//line 41 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		if (( ( ( _line.dx == 0 ) && ( _line.dy == 0 ) ) || ( ( left == right ) && ( top == bottom ) ) )) 
		{
			//line 42 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			return ;
		}
		
		//line 45 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		double x = _line.start.x;
		//line 46 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		double y = _line.start.y;
		//line 47 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		double invDx = ( (( _line.dx == 0 )) ? (((double) (1) )) : (( 1 / _line.dx )) );
		//line 48 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		double invDy = ( (( _line.dy == 0 )) ? (((double) (1) )) : (( 1 / _line.dy )) );
		//line 50 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		double difX = 0.0;
		//line 51 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		double difY = 0.0;
		//line 53 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		while (true)
		{
			//line 55 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			if (( ((int) (haxe.lang.Runtime.getField_f(start, "x", true)) ) < 0 )) 
			{
				//line 56 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
				difX = ( (( _line.dx > 0 )) ? (( 14 + haxe.lang.Runtime.getField_f(start, "gx", true) )) : (( ((double) (-14) ) - ((double) (haxe.lang.Runtime.getField_f(start, "gx", true)) ) )) );
			}
			else
			{
				//line 58 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
				difX = ( (( _line.dx > 0 )) ? (( ((double) (14) ) - ((double) (haxe.lang.Runtime.getField_f(start, "gx", true)) ) )) : ( - ((( haxe.lang.Runtime.getField_f(start, "gx", true) + 1 ))) ) );
			}
			
			//line 60 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			if (( ((int) (haxe.lang.Runtime.getField_f(start, "y", true)) ) < 0 )) 
			{
				//line 61 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
				difY = ( (( _line.dy > 0 )) ? (( 14 + haxe.lang.Runtime.getField_f(start, "gy", true) )) : (( ((double) (-14) ) - ((double) (haxe.lang.Runtime.getField_f(start, "gy", true)) ) )) );
			}
			else
			{
				//line 63 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
				difY = ( (( _line.dy > 0 )) ? (( ((double) (14) ) - ((double) (haxe.lang.Runtime.getField_f(start, "gy", true)) ) )) : ( - ((( haxe.lang.Runtime.getField_f(start, "gy", true) + 1 ))) ) );
			}
			
			//line 66 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			if (( _line.dx == 0 )) 
			{
				//line 67 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
				y += difY;
			}
			else
			{
				//line 68 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
				if (( _line.dy == 0 )) 
				{
					//line 69 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
					x += difX;
				}
				else
				{
					//line 72 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
					double step = ( y + ( ( _line.dy * difX ) * invDx ) );
					//line 73 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
					if (( java.lang.Math.abs(( step - y )) < java.lang.Math.abs(difY) )) 
					{
						//line 74 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
						x += difX;
						//line 75 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
						y = step;
					}
					else
					{
						//line 76 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
						if (( java.lang.Math.abs(( step - y )) == java.lang.Math.abs(difY) )) 
						{
							//line 77 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
							x += difX;
							//line 78 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
							y += difY;
						}
						else
						{
							//line 80 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
							x += ( ( _line.dx * difY ) * invDy );
							//line 81 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
							y += difY;
						}
						
					}
					
				}
				
			}
			
			//line 84 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			start = hxlr.engine.Cell.getInfo(x, y);
			//line 85 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			if (( ( ( ( ((int) (haxe.lang.Runtime.getField_f(start, "x", true)) ) >= left ) && ( ((int) (haxe.lang.Runtime.getField_f(start, "x", true)) ) <= right ) ) && ( ((int) (haxe.lang.Runtime.getField_f(start, "y", true)) ) >= top ) ) && ( ((int) (haxe.lang.Runtime.getField_f(start, "y", true)) ) <= bottom ) )) 
			{
				//line 86 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
				hxlr.engine.Grid.storeLine(_line, start);
				//line 87 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
				continue;
			}
			
			//line 89 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			return ;
		}
		
	}
	
	
	public static void addLine(hxlr.lines.LineObject _line)
	{
		//line 95 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		if (haxe.lang.Runtime.eq(_line.id, null)) 
		{
			//line 95 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			_line.id = hxlr.engine.Grid.lineIDCount;
		}
		
		//line 96 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		hxlr.engine.Grid.lines.__set(((int) (haxe.lang.Runtime.toInt(_line.id)) ), _line);
		//line 97 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		 ++ hxlr.engine.Grid.lineCount;
		//line 98 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		 ++ hxlr.engine.Grid.lineIDCount;
		//line 99 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		if (haxe.lang.Runtime.eq(hxlr.engine.Grid.subTypeCount.__get(_line.type), null)) 
		{
			//line 99 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			hxlr.engine.Grid.subTypeCount.__set(_line.type, 0);
		}
		
		//line 100 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		{
			//line 100 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			haxe.root.Array<java.lang.Object> __temp_arr3 = hxlr.engine.Grid.subTypeCount;
			//line 100 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			int __temp_arrIndex4 = _line.type;
			//line 100 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			java.lang.Object __temp_arrVal1 = __temp_arr3.__get(__temp_arrIndex4);
			//line 100 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			java.lang.Object __temp_arrRet2 = ((int) (haxe.lang.Runtime.toInt(__temp_arrVal1 = ( ((int) (haxe.lang.Runtime.toInt(__temp_arrVal1)) ) + 1 ))) );
			//line 100 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			int __temp_expr1 = ((int) (haxe.lang.Runtime.toInt(__temp_arr3.__set(__temp_arrIndex4, __temp_arrVal1))) );
			//line 100 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			java.lang.Object __temp_expr2 = __temp_arrRet2;
		}
		
	}
	
	
	public static void storeLine(hxlr.lines.LineObject _line, java.lang.Object _info)
	{
		//line 105 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		if (( ((hxlr.engine.Cell) (((haxe.ds.StringMap<hxlr.engine.Cell>) (((haxe.IMap<java.lang.String, hxlr.engine.Cell>) (hxlr.engine.Grid.registry) )) ).get(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(_info, "key", true)))) ) == null )) 
		{
			//line 106 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			haxe.IMap<java.lang.String, hxlr.engine.Cell> this1 = hxlr.engine.Grid.registry;
			//line 106 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			java.lang.String k = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(_info, "key", true));
			//line 106 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			hxlr.engine.Cell v = new hxlr.engine.Cell(((java.lang.Object) (_info) ));
			//line 106 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			((haxe.ds.StringMap<hxlr.engine.Cell>) (this1) ).set(k, v);
		}
		
		//line 108 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		((hxlr.engine.Cell) (((haxe.ds.StringMap<hxlr.engine.Cell>) (((haxe.IMap<java.lang.String, hxlr.engine.Cell>) (hxlr.engine.Grid.registry) )) ).get(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(_info, "key", true)))) ).addLine(_line);
		//line 109 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		_line.keyList.push(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(_info, "key", true)));
	}
	
	
	public static void deleteTrack()
	{
		//line 113 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		int _g = 0;
		//line 113 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		haxe.root.Array<hxlr.lines.LineObject> _g1 = hxlr.engine.Grid.lines;
		//line 113 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		while (( _g < _g1.length ))
		{
			//line 113 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			hxlr.lines.LineObject line = _g1.__get(_g);
			//line 113 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			 ++ _g;
			//line 113 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			hxlr.engine.Grid.unregister(line);
		}
		
	}
	
	
	public static void unregister(hxlr.lines.LineObject _line)
	{
		//line 118 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		if (( _line == null )) 
		{
			//line 118 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			return ;
		}
		
		//line 120 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		{
			//line 120 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			int _g = 0;
			//line 120 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			haxe.root.Array<java.lang.String> _g1 = _line.keyList;
			//line 120 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			while (( _g < _g1.length ))
			{
				//line 120 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
				java.lang.String key = _g1.__get(_g);
				//line 120 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
				 ++ _g;
				//line 121 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
				((hxlr.engine.Cell) (((haxe.ds.StringMap<hxlr.engine.Cell>) (((haxe.IMap<java.lang.String, hxlr.engine.Cell>) (hxlr.engine.Grid.registry) )) ).get(key)) ).removeLine(_line);
			}
			
		}
		
		//line 124 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		 -- hxlr.engine.Grid.lineCount;
		//line 125 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		{
			//line 125 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			haxe.root.Array<java.lang.Object> __temp_arr3 = hxlr.engine.Grid.subTypeCount;
			//line 125 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			int __temp_arrIndex4 = _line.type;
			//line 125 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			java.lang.Object __temp_arrVal1 = __temp_arr3.__get(__temp_arrIndex4);
			//line 125 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			java.lang.Object __temp_arrRet2 = ((int) (haxe.lang.Runtime.toInt(__temp_arrVal1 = ( ((int) (haxe.lang.Runtime.toInt(__temp_arrVal1)) ) - 1 ))) );
			//line 125 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			int __temp_expr1 = ((int) (haxe.lang.Runtime.toInt(__temp_arr3.__set(__temp_arrIndex4, __temp_arrVal1))) );
			//line 125 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
			java.lang.Object __temp_expr2 = __temp_arrRet2;
		}
		
		//line 127 "F:\\OpenLR\\library\\src\\hxlr\\engine\\Grid.hx"
		hxlr.engine.Grid.lines.__set(((int) (haxe.lang.Runtime.toInt(_line.id)) ), null);
	}
	
	
}


